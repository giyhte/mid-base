import telebot
import mysql.connector
from mysql.connector import Error

# üîê –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
BOT_TOKEN = "8363145008:AAEM6OSKNRjX3SDU6yINZwbMOEcsaOQVdiI"
OWNER_IDS = [7537570296, 5821123636]

DB_HOST = "sql8.freesqldatabase.com"
DB_USER = "sql8792761"
DB_PASSWORD = "1upRsp7dLm"
DB_NAME = "sql8792761"

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")

# üìå –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤, –≥–¥–µ –±–æ—Ç –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω
chats = set()

# üì¶ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
def get_connection():
    return mysql.connector.connect(
        host=DB_HOST,
        user=DB_USER,
        password=DB_PASSWORD,
        database=DB_NAME,
        charset="utf8mb4"
    )

# ‚öôÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
def init_db():
    try:
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id VARCHAR(100) PRIMARY KEY,
                role VARCHAR(50) DEFAULT '–Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π',
                scam_percent VARCHAR(10) DEFAULT '50%'
            )
        """)
        conn.commit()
        cursor.close()
        conn.close()
        print("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")

init_db()

# üî¢ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∏—Å–∫–∞ –ø–æ —Ä–æ–ª–∏
def get_risk(role):
    risks = {
        "–≤–ª–∞–¥–µ–ª–µ—Ü": "0%",
        "–≥–∞—Ä–∞–Ω—Ç": "0%",
        "–≤–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞": "10%",
        "–æ—Ç–∫–∞–∑ –æ—Ç –≥–∞—Ä–∞–Ω—Ç–∞": "80%",
        "—Å–∫–∞–º–µ—Ä": "100%",
        "–Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π": "50%"
    }
    return risks.get(role, "50%")

# üìä –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–æ–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_role(user_id, username=None):
    try:
        if isinstance(user_id, int) and user_id in OWNER_IDS:
            return "–≤–ª–∞–¥–µ–ª–µ—Ü"

        conn = get_connection()
        cursor = conn.cursor()

        if isinstance(user_id, str) and user_id.startswith("@"):
            cursor.execute("SELECT role FROM users WHERE user_id = %s", (user_id,))
        else:
            cursor.execute("SELECT role FROM users WHERE user_id = %s", (str(user_id),))

        result = cursor.fetchone()
        cursor.close()
        conn.close()

        if result and result[0]:
            return result[0]
        return "–Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–∏: {e}")
        return "–Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π"

# üëÄ –ß–µ–∫
@bot.message_handler(func=lambda msg: msg.text and msg.text.lower().startswith("—á–µ–∫"))
def handle_check(msg):
    chats.add(msg.chat.id)
    user = msg.reply_to_message.from_user if msg.reply_to_message else msg.from_user
    role = get_role(user.id)
    risk = get_risk(role)
    text = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å: <a href='tg://user?id={user.id}'>{user.first_name}</a>\n"
        f"üîπ –†–æ–ª—å: <code>{role}</code>\n"
        f"üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∫–∞–º–∞: <code>{risk}</code>"
    )
    bot.reply_to(msg, text)

# ‚ûï –ó–∞–Ω–µ—Å—Ç–∏
@bot.message_handler(func=lambda msg: msg.text and msg.text.lower().startswith("–∑–∞–Ω–µ—Å—Ç–∏"))
def handle_add_role(msg):
    chats.add(msg.chat.id)
    caller_role = get_role(msg.from_user.id)

    if msg.chat.type != "private":
        if msg.from_user.id not in OWNER_IDS and caller_role not in ["–≥–∞—Ä–∞–Ω—Ç", "–≤–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞"]:
            return

    parts = msg.text.strip().split()
    if len(parts) < 2:
        bot.reply_to(msg, "–ü—Ä–∏–º–µ—Ä—ã:\n–∑–∞–Ω–µ—Å—Ç–∏ —Å–∫–∞–º–µ—Ä (–æ—Ç–≤–µ—Ç–æ–º)\n–∑–∞–Ω–µ—Å—Ç–∏ @username —Å–∫–∞–º–µ—Ä")
        return

    if parts[1].startswith("@"):
        if len(parts) < 3:
            bot.reply_to(msg, "–ü—Ä–∏–º–µ—Ä: –∑–∞–Ω–µ—Å—Ç–∏ @MidGARANT —Å–∫–∞–º–µ—Ä")
            return
        username = parts[1][1:]
        role = parts[2].lower()
        target_id = f"@{username}"
        target_name = f"@{username}"
    else:
        if not msg.reply_to_message:
            bot.reply_to(msg, "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∑–∞–Ω–µ—Å—Ç–∏ @username —Ä–æ–ª—å")
            return
        role = parts[1].lower()
        target = msg.reply_to_message.from_user
        target_id = target.id
        target_name = target.first_name

    allowed_roles = ["—Å–∫–∞–º–µ—Ä", "–≥–∞—Ä–∞–Ω—Ç", "–≤–ª–∞–¥–µ–ª–µ—Ü_—á–∞—Ç–∞", "–æ—Ç–∫–∞–∑", "–æ—Ç–∫–∞–∑_–æ—Ç_–≥–∞—Ä–∞–Ω—Ç–∞"]
    if role not in allowed_roles:
        bot.reply_to(msg, "–†–æ–ª–∏: —Å–∫–∞–º–µ—Ä, –≥–∞—Ä–∞–Ω—Ç, –≤–ª–∞–¥–µ–ª–µ—Ü_—á–∞—Ç–∞, –æ—Ç–∫–∞–∑, –æ—Ç–∫–∞–∑_–æ—Ç_–≥–∞—Ä–∞–Ω—Ç–∞")
        return

    if caller_role in ["–≥–∞—Ä–∞–Ω—Ç", "–≤–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞"] and role == "–≥–∞—Ä–∞–Ω—Ç":
        bot.reply_to(msg, "‚ùå –ù–µ–ª—å–∑—è –∑–∞–Ω–æ—Å–∏—Ç—å –≥–∞—Ä–∞–Ω—Ç–æ–≤.")
        return

    if isinstance(target_id, int) and target_id in OWNER_IDS:
        bot.reply_to(msg, "‚ùå –ù–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å —Ä–æ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü—É.")
        return

    if role.startswith("–æ—Ç–∫–∞–∑"):
        role_text = "–æ—Ç–∫–∞–∑ –æ—Ç –≥–∞—Ä–∞–Ω—Ç–∞"
        scam_percent = "80%"
    elif role == "–≤–ª–∞–¥–µ–ª–µ—Ü_—á–∞—Ç–∞":
        role_text = "–≤–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞"
        scam_percent = "10%"
    elif role == "—Å–∫–∞–º–µ—Ä":
        role_text = "—Å–∫–∞–º–µ—Ä"
        scam_percent = "100%"
    elif role == "–≥–∞—Ä–∞–Ω—Ç":
        role_text = "–≥–∞—Ä–∞–Ω—Ç"
        scam_percent = "0%"
    else:
        role_text = role
        scam_percent = "50%"

    try:
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute(
            "REPLACE INTO users (user_id, role, scam_percent) VALUES (%s, %s, %s)",
            (str(target_id), role_text, scam_percent)
        )
        conn.commit()
        cursor.close()
        conn.close()
    except Error as e:
        bot.reply_to(msg, f"–û—à–∏–±–∫–∞ –ë–î: {e}")
        return

    if role_text == "—Å–∫–∞–º–µ—Ä":
        alert = f"‚ö†Ô∏è <a href='tg://user?id={target_id}'>{target_name}</a> –∑–∞–Ω–µ—Å—ë–Ω –∫–∞–∫ <b>–°–ö–ê–ú–ï–†</b>!"
        for chat_id in chats:
            try:
                bot.send_message(chat_id, alert)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç {chat_id}: {e}")

    bot.reply_to(msg, f"{target_name} ‚úÖ –∑–∞–Ω–µ—Å—ë–Ω –∫–∞–∫ {role_text.upper()}")

# ‚ûñ –í—ã–Ω–µ—Å—Ç–∏
@bot.message_handler(func=lambda msg: msg.text and msg.text.lower().startswith("–≤—ã–Ω–µ—Å—Ç–∏"))
def handle_remove_user(msg):
    chats.add(msg.chat.id)
    caller_role = get_role(msg.from_user.id)

    if msg.chat.type != "private":
        if msg.from_user.id not in OWNER_IDS and caller_role not in ["–≥–∞—Ä–∞–Ω—Ç", "–≤–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞"]:
            return

    parts = msg.text.strip().split()

    if len(parts) >= 2 and parts[1].startswith("@"):
        username = parts[1][1:]
        target_id = f"@{username}"
        target_name = f"@{username}"
    else:
        if not msg.reply_to_message:
            bot.reply_to(msg, "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –≤—ã–Ω–µ—Å—Ç–∏ @username")
            return
        target = msg.reply_to_message.from_user
        target_id = target.id
        target_name = target.first_name

    if isinstance(target_id, int) and target_id in OWNER_IDS:
        bot.reply_to(msg, "‚ùå –ù–µ–ª—å–∑—è –≤—ã–Ω–æ—Å–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
        return

    try:
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM users WHERE user_id = %s", (str(target_id),))
        if cursor.rowcount > 0:
            conn.commit()
            bot.reply_to(msg, f"‚úÖ {target_name} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã")
        else:
            bot.reply_to(msg, f"‚ùå {target_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        cursor.close()
        conn.close()
    except Error as e:
        bot.reply_to(msg, f"–û—à–∏–±–∫–∞ –ë–î: {e}")

# –ù–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏
@bot.message_handler(content_types=['new_chat_members'])
def on_new_members(message):
    chats.add(message.chat.id)
    for user in message.new_chat_members:
        role = get_role(user.id)
        risk = get_risk(role)
        if role == "–Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π":
            bot.send_message(
                message.chat.id,
                f"üö® –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={user.id}'>{user.first_name}</a>\n"
                f"–†–æ–ª—å: <code>{role}</code>\nüìä –†–∏—Å–∫: <code>{risk}</code>"
            )

# –ê–≤—Ç–æ—á–µ–∫ –≤ —á–∞—Ç–∞—Ö
@bot.message_handler(func=lambda msg: msg.chat.type in ["group", "supergroup"])
def auto_check_group(msg):
    chats.add(msg.chat.id)
    user = msg.from_user
    role = get_role(user.id)
    if role == "—Å–∫–∞–º–µ—Ä":
        bot.reply_to(msg, f"‚ö†Ô∏è –û—Å—Ç–æ—Ä–æ–∂–Ω–æ! <a href='tg://user?id={user.id}'>{user.first_name}</a> ‚Äî <b>–°–ö–ê–ú–ï–†</b>.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ–≥–æ
@bot.message_handler(func=lambda msg: True)
def register_chat(msg):
    chats.add(msg.chat.id)

# üîÅ –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
try:
    bot.infinity_polling()
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
