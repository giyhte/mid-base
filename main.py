import telebot
import mysql.connector
from mysql.connector import Error

BOT_TOKEN = "8363145008:AAEM6OSKNRjX3SDU6yINZwbMOEcsaOQVdiI"
OWNER_IDS = [7537570296, 5821123636]

DB_HOST = "sql8.freesqldatabase.com"
DB_USER = "sql8792761"
DB_PASSWORD = "1upRsp7dLm"
DB_NAME = "sql8792761"

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")
chats = set()

import time

def get_connection():
    max_retries = 3
    for attempt in range(max_retries):
        try:
            conn = mysql.connector.connect(
                host=DB_HOST,
                user=DB_USER,
                password=DB_PASSWORD,
                database=DB_NAME,
                charset="utf8mb4",
                autocommit=True,
                connection_timeout=10,
                buffered=True
            )
            return conn
        except Error as e:
            print(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {attempt + 1}/{max_retries} –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
            if attempt < max_retries - 1:
                time.sleep(2)
            else:
                raise e

def init_db():
    max_retries = 5
    for attempt in range(max_retries):
        try:
            print(f"–ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î {attempt + 1}/{max_retries}...")
            conn = get_connection()
            cursor = conn.cursor()

            # –¢–∞–±–ª–∏—Ü–∞ user_permissions —Ç–µ–ø–µ—Ä—å –Ω–µ —É–¥–∞–ª—è–µ—Ç—Å—è –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ

            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id VARCHAR(100) PRIMARY KEY,
                role VARCHAR(50) DEFAULT '–Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π',
                scam_percent VARCHAR(10) DEFAULT '50%'
            )""")

            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è username
            cursor.execute("""
            CREATE TABLE IF NOT EXISTS usernames (
                user_id VARCHAR(100) PRIMARY KEY,
                username VARCHAR(100)
            )""")

            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —á–∞—Ç–æ–≤
            cursor.execute("""
            CREATE TABLE IF NOT EXISTS bot_chats (
                chat_id VARCHAR(100) PRIMARY KEY,
                chat_title VARCHAR(255),
                chat_type VARCHAR(50),
                last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
            )""")

            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞ –∫–æ–º–∞–Ω–¥—ã
            cursor.execute("""
            CREATE TABLE IF NOT EXISTS user_permissions (
                id INT AUTO_INCREMENT PRIMARY KEY,
                user_id VARCHAR(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
                command_name VARCHAR(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
                has_permission BOOLEAN DEFAULT TRUE,
                granted_by VARCHAR(100) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci,
                granted_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
                UNIQUE KEY unique_user_command (user_id, command_name)
            ) CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci""")

            conn.commit()
            cursor.close()
            conn.close()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
            return
        except Error as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if attempt < max_retries - 1:
                time.sleep(5)
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")

init_db()

def get_risk(user_id):
    try:
        if isinstance(user_id, int) and user_id in OWNER_IDS:
            return "0%"

        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT role, scam_percent FROM users WHERE user_id = %s", (str(user_id),))
        result = cursor.fetchone()

        if result:
            role, scam_percent = result
            cursor.close()
            conn.close()

            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if scam_percent and scam_percent != "50%":
                return scam_percent
            # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–ª—è —Ä–æ–ª–∏
            risks = {
                "–≤–ª–∞–¥–µ–ª–µ—Ü": "0%",
                "–≥–∞—Ä–∞–Ω—Ç": "0%",
                "–≤–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞": "10%",
                "–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π": "10%",
                "–æ—Ç–∫–∞–∑ –æ—Ç –≥–∞—Ä–∞–Ω—Ç–∞": "80%",
                "—Å–∫–∞–º–µ—Ä": "100%",
                "–Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π": "50%"
            }
            return risks.get(role, "50%")
        else:
            cursor.close()
            conn.close()
            return "50%"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∏—Å–∫–∞ –¥–ª—è {user_id}: {e}")
        return "50%"

def get_role(user_id):
    try:
        if isinstance(user_id, int) and user_id in OWNER_IDS:
            return "–≤–ª–∞–¥–µ–ª–µ—Ü"

        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT role FROM users WHERE user_id = %s", (str(user_id),))
        result = cursor.fetchone()
        cursor.close()
        conn.close()

        return result[0] if result and result[0] else "–Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–∏ –¥–ª—è {user_id}: {e}")
        return "–Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π"

@bot.message_handler(commands=["start"])
def start_command(msg):
    bot.reply_to(msg, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∞–∫—Ç–∏–≤–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.")

@bot.message_handler(commands=["help"])
def help_command(msg):
    user_id = msg.from_user.id

    # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–æ—Å—Ç—É–ø–Ω—ã–µ –≤—Å–µ–º
    text = (
        "üìò –ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Äî —á–µ–∫ (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ, –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–ª–∏ @username)\n"
        "‚Äî –≥–∞—Ä–∞–Ω—Ç—ã (–ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö –≥–∞—Ä–∞–Ω—Ç–æ–≤)\n"
    )

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if has_command_permission(user_id, "–∑–∞–Ω–µ—Å—Ç–∏"):
        text += "‚Äî –∑–∞–Ω–µ—Å—Ç–∏ —Ä–æ–ª—å (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ @username —Ä–æ–ª—å)\n"

    if has_command_permission(user_id, "–≤—ã–Ω–µ—Å—Ç–∏"):
        text += "‚Äî –≤—ã–Ω–µ—Å—Ç–∏ (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ @username)\n"

    if has_command_permission(user_id, "–∏–ø"):
        text += "‚Äî –∏–ø 30 (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"

    # –ö–æ–º–∞–Ω–¥—ã —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤
    if user_id in OWNER_IDS:
        text += "‚Äî +–∫–º–¥ –∫–æ–º–∞–Ω–¥–∞ (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ) ‚Äî –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞\n"
        text += "‚Äî -–∫–º–¥ –∫–æ–º–∞–Ω–¥–∞ (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ) ‚Äî –æ—Ç–Ω—è—Ç—å –ø—Ä–∞–≤–∞\n"
        text += "‚Äî /–≥—Å (—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è) ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Å–µ —á–∞—Ç—ã\n"
        text += "‚Äî /—á–∞—Ç—ã ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤\n"

    text += (
        "\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ä–æ–ª–∏: —Å–∫–∞–º–µ—Ä, –≥–∞—Ä–∞–Ω—Ç, –≤–ª–∞–¥–µ–ª–µ—Ü_—á–∞—Ç–∞, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π, –æ—Ç–∫–∞–∑_–æ—Ç_–≥–∞—Ä–∞–Ω—Ç–∞\n"
        "\n–ü—Ä–∏–º–µ—Ä—ã —Å username:\n"
        "‚Äî —á–µ–∫ @username\n"
        "‚Äî –∑–∞–Ω–µ—Å—Ç–∏ @username –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π\n"
        "‚Äî –≤—ã–Ω–µ—Å—Ç–∏ @username\n"
        "\n–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ"
    )

    bot.reply_to(msg, text)

def get_user_by_username(username):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç username –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ ID"""
    try:
        # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        username = username.lstrip('@')

        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        user_info = None

        # –ú–µ—Ç–æ–¥ 1: –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ API
        try:
            user_info = bot.get_chat(f"@{username}")
        except:
            pass

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        if user_info is None:
            return None

        return user_info
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username {username}: {e}")
        return None

def save_username_mapping(user_id, username):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–≤—è–∑—å user_id -> username –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = get_connection()
        cursor = conn.cursor()
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º username
        cursor.execute(
            "REPLACE INTO usernames (user_id, username) VALUES (%s, %s)",
            (str(user_id), username)
        )
        cursor.close()
        conn.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ username –¥–ª—è {user_id}: {e}")

def find_user_by_username(username):
    """–ò—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        username = username.lstrip('@')
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM usernames WHERE username = %s", (username,))
        result = cursor.fetchone()
        cursor.close()
        conn.close()
        return result[0] if result else None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ username {username} –≤ –ë–î: {e}")
        return None

def has_command_permission(user_id, command_name):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø—Ä–∞–≤–æ –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã"""
    try:
        # –í–ª–∞–¥–µ–ª—å—Ü—ã –≤—Å–µ–≥–¥–∞ –∏–º–µ—é—Ç –≤—Å–µ –ø—Ä–∞–≤–∞
        if isinstance(user_id, int) and user_id in OWNER_IDS:
            return True

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤—Å–µ –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
        user_id_str = str(user_id)
        command_name_str = str(command_name)

        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —è–≤–Ω–æ –≤—ã–¥–∞–Ω–Ω—ã–µ –ø—Ä–∞–≤–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute(
            "SELECT has_permission FROM user_permissions WHERE CAST(user_id AS CHAR) = %s AND CAST(command_name AS CHAR) = %s",
            (user_id_str, command_name_str)
        )
        result = cursor.fetchone()
        cursor.close()
        conn.close()

        # –ï—Å–ª–∏ –Ω–∞–π–¥–µ–Ω–∞ —è–≤–Ω–∞—è –∑–∞–ø–∏—Å—å –æ –ø—Ä–∞–≤–∞—Ö, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ—ë
        if result is not None:
            return bool(result[0])

        # –ï—Å–ª–∏ —è–≤–Ω—ã—Ö –ø—Ä–∞–≤ –Ω–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ —Ä–æ–ª–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è –±–∞–∑–æ–≤—ã—Ö –∫–æ–º–∞–Ω–¥)
        role = get_role(user_id)
        if role in ["–≥–∞—Ä–∞–Ω—Ç", "–≤–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞"] and command_name_str in ["–∑–∞–Ω–µ—Å—Ç–∏", "–≤—ã–Ω–µ—Å—Ç–∏"]:
            return True

        # –í–ª–∞–¥–µ–ª—å—Ü—ã –∏–º–µ—é—Ç –ø—Ä–∞–≤–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—É "–∏–ø" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        if role == "–≤–ª–∞–¥–µ–ª–µ—Ü" and command_name_str == "–∏–ø":
            return True

        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∏ —è–≤–Ω—ã—Ö –ø—Ä–∞–≤, –Ω–∏ –ø—Ä–∞–≤ –ø–æ —Ä–æ–ª–∏ - –æ—Ç–∫–∞–∑—ã–≤–∞–µ–º
        return False

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –¥–ª—è {user_id}, –∫–æ–º–∞–Ω–¥–∞ {command_name}: {e}")
        return False

def grant_command_permission(user_id, command_name, granted_by, has_permission=True):
    """–í—ã–¥–∞–µ—Ç –∏–ª–∏ –æ—Ç–Ω–∏–º–∞–µ—Ç –ø—Ä–∞–≤–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—É —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("""
            REPLACE INTO user_permissions (user_id, command_name, has_permission, granted_by, granted_at)
            VALUES (%s, %s, %s, %s, NOW())
        """, (str(user_id), command_name, has_permission, str(granted_by)))
        conn.commit()
        cursor.close()
        conn.close()
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø—Ä–∞–≤ –¥–ª—è {user_id}, –∫–æ–º–∞–Ω–¥–∞ {command_name}: {e}")
        return False

@bot.message_handler(func=lambda msg: msg.text and msg.text.lower().startswith("—á–µ–∫"))
def handle_check(msg):
    chats.add(msg.chat.id)

    parts = msg.text.strip().split()

    # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω username
    if len(parts) > 1 and parts[1].startswith('@'):
        username = parts[1]

        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        user_id = find_user_by_username(username.lstrip('@'))

        if user_id:
            # –ù–∞—à–ª–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            role = get_role(user_id)
            risk = get_risk(user_id)
            profile_link = f"<a href='tg://user?id={user_id}'>{username}</a>"

            text = (
                f"üë§ –ü—Ä–æ—Ñ–∏–ª—å: {profile_link}\n"
                f"üîπ –†–æ–ª—å: {role}\n"
                f"üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∫–∞–º–∞: {risk}"
            )
        else:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ API Telegram
            user_info = get_user_by_username(username)
            if user_info:
                user_id = user_info.id
                user_name = user_info.first_name
                role = get_role(user_id)
                risk = get_risk(user_id)
                profile_link = f"<a href='tg://user?id={user_id}'>{user_name}</a>"

                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å username -> user_id
                save_username_mapping(user_id, username.lstrip('@'))

                text = (
                    f"üë§ –ü—Ä–æ—Ñ–∏–ª—å: {profile_link}\n"
                    f"üîπ –†–æ–ª—å: {role}\n"
                    f"üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∫–∞–º–∞: {risk}"
                )
            else:
                text = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {username} –Ω–µ –Ω–∞–π–¥–µ–Ω"
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ reply –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        user = msg.reply_to_message.from_user if msg.reply_to_message else msg.from_user
        user_id = user.id
        user_name = user.first_name
        role = get_role(user_id)
        risk = get_risk(user_id)
        profile_link = f"<a href='tg://user?id={user_id}'>{user_name}</a>"

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º username –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if user.username:
            save_username_mapping(user_id, user.username)

        text = (
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å: {profile_link}\n"
            f"üîπ –†–æ–ª—å: {role}\n"
            f"üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∫–∞–º–∞: {risk}"
        )

    bot.reply_to(msg, text)

@bot.message_handler(func=lambda msg: msg.text and msg.text.lower().startswith("–∑–∞–Ω–µ—Å—Ç–∏"))
def handle_add_role(msg):
    chats.add(msg.chat.id)
    caller_role = get_role(msg.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É
    if not has_command_permission(msg.from_user.id, "–∑–∞–Ω–µ—Å—Ç–∏"):
        bot.reply_to(msg, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã '–∑–∞–Ω–µ—Å—Ç–∏'.")
        return

    parts = msg.text.strip().split()
    if len(parts) < 2:
        bot.reply_to(msg, "–ü—Ä–∏–º–µ—Ä: –∑–∞–Ω–µ—Å—Ç–∏ —Å–∫–∞–º–µ—Ä (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ) –∏–ª–∏ –∑–∞–Ω–µ—Å—Ç–∏ @username —Å–∫–∞–º–µ—Ä")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ username
    if len(parts) >= 3 and parts[1].startswith('@'):
        username = parts[1]
        role = parts[2].lower()

        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
        user_id = find_user_by_username(username.lstrip('@'))

        if not user_id:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ API
            user_info = get_user_by_username(username)
            if user_info:
                user_id = user_info.id
                target_name = user_info.first_name
                save_username_mapping(user_id, username.lstrip('@'))
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω —á–µ—Ä–µ–∑ API, —Å–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—É—é –∑–∞–ø–∏—Å—å
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ö–µ—à –æ—Ç username –∫–∞–∫ –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID
                import hashlib
                temp_id = abs(hash(username.lstrip('@'))) % (10**9)  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
                user_id = temp_id
                target_name = username.lstrip('@')
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å username -> temp_id
                save_username_mapping(temp_id, username.lstrip('@'))
                print(f"–°–æ–∑–¥–∞–Ω –≤—Ä–µ–º–µ–Ω–Ω—ã–π ID {temp_id} –¥–ª—è username {username}")
        else:
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –≤ –±–∞–∑–µ, –ø–æ–ª—É—á–∞–µ–º –∏–º—è —á–µ—Ä–µ–∑ API –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
            try:
                user_info = bot.get_chat(int(user_id))
                target_name = user_info.first_name
            except:
                target_name = username

        target_id = int(user_id)
        profile_link = f"<a href='tg://user?id={target_id}'>{target_name}</a>"

    elif msg.reply_to_message:
        # –†–∞–±–æ—Ç–∞–µ–º —á–µ—Ä–µ–∑ reply
        role = parts[1].lower()
        target = msg.reply_to_message.from_user
        target_id = target.id
        target_name = target.first_name
        profile_link = f"<a href='tg://user?id={target.id}'>{target.first_name}</a>"
    else:
        bot.reply_to(msg, "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ @username.\n–ü—Ä–∏–º–µ—Ä: –∑–∞–Ω–µ—Å—Ç–∏ @username —Å–∫–∞–º–µ—Ä")
        return

    allowed_roles = ["—Å–∫–∞–º–µ—Ä", "–≥–∞—Ä–∞–Ω—Ç", "–≤–ª–∞–¥–µ–ª–µ—Ü_—á–∞—Ç–∞", "–æ—Ç–∫–∞–∑", "–æ—Ç–∫–∞–∑_–æ—Ç_–≥–∞—Ä–∞–Ω—Ç–∞", "–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π"]
    if role not in allowed_roles:
        bot.reply_to(msg, "–†–æ–ª–∏: —Å–∫–∞–º–µ—Ä, –≥–∞—Ä–∞–Ω—Ç, –≤–ª–∞–¥–µ–ª–µ—Ü_—á–∞—Ç–∞, –æ—Ç–∫–∞–∑, –æ—Ç–∫–∞–∑_–æ—Ç_–≥–∞—Ä–∞–Ω—Ç–∞, –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π")
        return

    if caller_role in ["–≥–∞—Ä–∞–Ω—Ç", "–≤–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞"] and role == "–≥–∞—Ä–∞–Ω—Ç":
        bot.reply_to(msg, "‚ùå –ù–µ–ª—å–∑—è –∑–∞–Ω–æ—Å–∏—Ç—å –≥–∞—Ä–∞–Ω—Ç–æ–≤.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –≤—ã–¥–∞—á—É —Ä–æ–ª–∏ "–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π"
    if role == "–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π" and caller_role not in ["–≤–ª–∞–¥–µ–ª–µ—Ü", "–≤–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞"]:
        bot.reply_to(msg, "‚ùå –†–æ–ª—å '–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π' –º–æ–∂–µ—Ç –≤—ã–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∏–ª–∏ –≤–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞.")
        return

    if isinstance(target_id, int) and target_id in OWNER_IDS:
        bot.reply_to(msg, "‚ùå –ù–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å —Ä–æ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü—É.")
        return

    if role.startswith("–æ—Ç–∫–∞–∑"):
        role_text = "–æ—Ç–∫–∞–∑ –æ—Ç –≥–∞—Ä–∞–Ω—Ç–∞"
        scam_percent = "80%"
    elif role == "–≤–ª–∞–¥–µ–ª–µ—Ü_—á–∞—Ç–∞":
        role_text = "–≤–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞"
        scam_percent = "10%"
    elif role == "—Å–∫–∞–º–µ—Ä":
        role_text = "—Å–∫–∞–º–µ—Ä"
        scam_percent = "100%"
    elif role == "–≥–∞—Ä–∞–Ω—Ç":
        role_text = "–≥–∞—Ä–∞–Ω—Ç"
        scam_percent = "0%"
    elif role == "–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π":
        role_text = "–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π"
        scam_percent = "10%"
    else:
        role_text = role
        scam_percent = "50%"

    try:
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute(
            "REPLACE INTO users (user_id, role, scam_percent) VALUES (%s, %s, %s)",
            (str(target_id), role_text, scam_percent)
        )
        conn.commit()
        cursor.close()
        conn.close()
    except Error as e:
        bot.reply_to(msg, f"–û—à–∏–±–∫–∞ –ë–î: {e}")
        return

    if role_text == "—Å–∫–∞–º–µ—Ä":
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
        if len(parts) >= 3 and parts[1].startswith('@'):
            # –ï—Å–ª–∏ —á–µ—Ä–µ–∑ username, —Å–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å —á–µ—Ä–µ–∑ ID
            alert = f"‚ö†Ô∏è <a href='tg://user?id={target_id}'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</a> (@{username.lstrip('@')}) –∑–∞–Ω–µ—Å—ë–Ω –∫–∞–∫ <b>–°–ö–ê–ú–ï–†</b>!"
        else:
            # –ï—Å–ª–∏ —á–µ—Ä–µ–∑ reply, –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ–±—ã—á–Ω—É—é —Å—Å—ã–ª–∫—É
            alert = f"‚ö†Ô∏è {profile_link} –∑–∞–Ω–µ—Å—ë–Ω –∫–∞–∫ <b>–°–ö–ê–ú–ï–†</b>!"

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —á–∞—Ç—ã
        all_possible_chats = get_all_bot_chats()
        for chat_id in all_possible_chats:
            try:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
                try:
                    chat_id_int = int(chat_id)
                except:
                    chat_id_int = chat_id

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –≤—Å–µ –µ—â–µ –µ—Å—Ç—å –≤ —á–∞—Ç–µ
                member = bot.get_chat_member(chat_id_int, bot.get_me().id)
                if member.status in ['member', 'administrator', 'creator']:
                    bot.send_message(chat_id_int, alert)

            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç {chat_id}: {e}")

    bot.reply_to(msg, f"{profile_link} ‚úÖ –∑–∞–Ω–µ—Å—ë–Ω –∫–∞–∫ {role_text.upper()}")

@bot.message_handler(func=lambda msg: msg.text and msg.text.lower().startswith("–≤—ã–Ω–µ—Å—Ç–∏"))
def handle_remove_user(msg):
    chats.add(msg.chat.id)
    caller_role = get_role(msg.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É
    if not has_command_permission(msg.from_user.id, "–≤—ã–Ω–µ—Å—Ç–∏"):
        bot.reply_to(msg, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã '–≤—ã–Ω–µ—Å—Ç–∏'.")
        return

    parts = msg.text.strip().split()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —É–∫–∞–∑–∞–Ω –ª–∏ username
    if len(parts) >= 2 and parts[1].startswith('@'):
        username = parts[1]

        # –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username
        user_id = find_user_by_username(username.lstrip('@'))

        if not user_id:
            # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —á–µ—Ä–µ–∑ API
            user_info = get_user_by_username(username)
            if user_info:
                user_id = user_info.id
                target_name = user_info.first_name
                save_username_mapping(user_id, username.lstrip('@'))
            else:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ –æ–Ω –≤ –±–∞–∑–µ –ø–æ username
                import hashlib
                temp_id = abs(hash(username.lstrip('@'))) % (10**9)
                user_id = temp_id
                target_name = username.lstrip('@')
                print(f"–ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—Ä–µ–º–µ–Ω–Ω—ã–º ID {temp_id} –¥–ª—è username {username}")
        else:
            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –≤ –±–∞–∑–µ, –ø–æ–ª—É—á–∞–µ–º –∏–º—è —á–µ—Ä–µ–∑ API –¥–ª—è –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç–∏
            try:
                user_info = bot.get_chat(int(user_id))
                target_name = user_info.first_name
            except:
                target_name = username

        target_id = int(user_id)
        profile_link = f"<a href='tg://user?id={target_id}'>{target_name}</a>"

    elif msg.reply_to_message:
        # –†–∞–±–æ—Ç–∞–µ–º —á–µ—Ä–µ–∑ reply
        target = msg.reply_to_message.from_user
        target_id = target.id
        profile_link = f"<a href='tg://user?id={target.id}'>{target.first_name}</a>"
    else:
        bot.reply_to(msg, "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ @username.\n–ü—Ä–∏–º–µ—Ä: –≤—ã–Ω–µ—Å—Ç–∏ @username")
        return

    if isinstance(target_id, int) and target_id in OWNER_IDS:
        bot.reply_to(msg, "‚ùå –ù–µ–ª—å–∑—è –≤—ã–Ω–æ—Å–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
        return

    try:
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM users WHERE user_id = %s", (str(target_id),))
        if cursor.rowcount > 0:
            conn.commit()
            bot.reply_to(msg, f"‚úÖ {profile_link} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã")
        else:
            bot.reply_to(msg, f"‚ùå {profile_link} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        cursor.close()
        conn.close()
    except Error as e:
        bot.reply_to(msg, f"–û—à–∏–±–∫–∞ –ë–î: {e}")

@bot.message_handler(func=lambda msg: msg.text and msg.text.lower().startswith("–≥–∞—Ä–∞–Ω—Ç—ã"))
def handle_show_guarantors(msg):
    chats.add(msg.chat.id)
    
    try:
        conn = get_connection()
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å —Ä–æ–ª—å—é "–≥–∞—Ä–∞–Ω—Ç", –∏—Å–∫–ª—é—á–∞—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∏ –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —á–∞—Ç–∞
        cursor.execute("SELECT user_id FROM users WHERE role = '–≥–∞—Ä–∞–Ω—Ç' AND role NOT IN ('–≤–ª–∞–¥–µ–ª–µ—Ü', '–≤–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞')")
        guarantors = cursor.fetchall()
        
        cursor.close()
        conn.close()
        
        # –¢–∞–∫–∂–µ –∏—Å–∫–ª—é—á–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –∏–∑ OWNER_IDS
        filtered_guarantors = []
        for (user_id,) in guarantors:
            if int(user_id) not in OWNER_IDS:
                filtered_guarantors.append((user_id,))
        
        if not filtered_guarantors:
            bot.reply_to(msg, "üìã –í –∞–∫—Ç–∏–≤–Ω–æ–º —Å–ø–∏—Å–∫–µ –≥–∞—Ä–∞–Ω—Ç–æ–≤ –±–∞–∑—ã –Ω–µ—Ç –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –≥–∞—Ä–∞–Ω—Ç–æ–≤ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª–∏
        guarantor_list = []
        for (user_id,) in filtered_guarantors:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ —á–µ—Ä–µ–∑ API
                user_info = bot.get_chat(int(user_id))
                first_name = user_info.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                
                # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å
                profile_link = f"<a href='tg://user?id={user_id}'>{first_name}</a>"
                guarantor_list.append(f"‚Ä¢ {profile_link}")
                
            except Exception as api_error:
                # –ï—Å–ª–∏ API –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤—Å–µ —Ä–∞–≤–Ω–æ —Å–æ–∑–¥–∞–µ–º –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
                profile_link = f"<a href='tg://user?id={user_id}'>–ì–∞—Ä–∞–Ω—Ç (ID: {user_id})</a>"
                guarantor_list.append(f"‚Ä¢ {profile_link}")
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –¥–ª—è user_id {user_id}: {api_error}")
        
        # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
        text = f"üõ°Ô∏è <b>–ê–∫—Ç–∏–≤–Ω—ã–π —Å–ø–∏—Å–æ–∫ –≥–∞—Ä–∞–Ω—Ç–æ–≤ –±–∞–∑—ã ({len(guarantor_list)}):</b>\n\n"
        text += "\n".join(guarantor_list)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç–∏
        text += f"\n\nüí° <i>–í—Å–µ –≥–∞—Ä–∞–Ω—Ç—ã –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å</i>"
        
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É —Å–æ–æ–±—â–µ–Ω–∏—è (Telegram –∏–º–µ–µ—Ç –ª–∏–º–∏—Ç 4096 —Å–∏–º–≤–æ–ª–æ–≤)
        if len(text) > 4000:
            text = text[:3950] + "\n\n... –∏ –¥—Ä—É–≥–∏–µ\n\nüí° <i>–í—Å–µ –≥–∞—Ä–∞–Ω—Ç—ã –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å</i>"
        
        bot.reply_to(msg, text)
        
    except Exception as e:
        bot.reply_to(msg, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≥–∞—Ä–∞–Ω—Ç–æ–≤ –±–∞–∑—ã: {e}")

@bot.message_handler(func=lambda msg: msg.text and msg.text.lower().startswith("–∏–ø"))
def handle_change_scam_percent(msg):
    chats.add(msg.chat.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –Ω–∞ –∫–æ–º–∞–Ω–¥—É
    if not has_command_permission(msg.from_user.id, "–∏–ø"):
        bot.reply_to(msg, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã '–∏–ø'.")
        return

    if not msg.reply_to_message:
        bot.reply_to(msg, "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç.")
        return
    parts = msg.text.strip().split()
    if len(parts) != 2 or not parts[1].isdigit():
        bot.reply_to(msg, "–ü—Ä–∏–º–µ—Ä: –∏–ø 30 (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)")
        return

    target = msg.reply_to_message.from_user
    target_id = target.id
    percent = parts[1] + "%"
    profile_link = f"<a href='tg://user?id={target.id}'>{target.first_name}</a>"

    try:
        conn = get_connection()
        cursor = conn.cursor()
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        cursor.execute("SELECT user_id FROM users WHERE user_id = %s", (str(target_id),))
        user_exists = cursor.fetchone()

        if user_exists:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute(
                "UPDATE users SET scam_percent = %s WHERE user_id = %s",
                (percent, str(target_id))
            )
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º
            cursor.execute(
                "INSERT INTO users (user_id, role, scam_percent) VALUES (%s, %s, %s)",
                (str(target_id), "–Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π", percent)
            )

        conn.commit()
        cursor.close()
        conn.close()
        bot.reply_to(msg, f"‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∞–º–∞ –¥–ª—è {profile_link} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {percent}")
    except Error as e:
        bot.reply_to(msg, f"–û—à–∏–±–∫–∞ –ë–î: {e}")

def get_all_bot_chats():
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —á–∞—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≥–¥–µ –±–æ—Ç –∫–æ–≥–¥–∞-–ª–∏–±–æ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω"""
    try:
        conn = get_connection()
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT chat_id FROM bot_chats")
        db_chats = [row[0] for row in cursor.fetchall()]

        cursor.close()
        conn.close()

        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Ç–µ–∫—É—â–∏–º–∏ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —á–∞—Ç–∞–º–∏
        all_chats = set(db_chats + [str(chat_id) for chat_id in chats])
        return all_chats
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤ –∏–∑ –ë–î: {e}")
        return set(str(chat_id) for chat_id in chats)

def save_chat_to_db(chat_id, chat_title=None, chat_type=None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = get_connection()
        cursor = conn.cursor()

        cursor.execute("""
        REPLACE INTO bot_chats (chat_id, chat_title, chat_type) 
        VALUES (%s, %s, %s)
        """, (str(chat_id), chat_title, chat_type))

        cursor.close()
        conn.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–∞—Ç–∞ {chat_id} –≤ –ë–î: {e}")

# --- –î–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ---
@bot.message_handler(commands=["–≥—Å"])
def handle_global_message(msg):
    if msg.from_user.id not in OWNER_IDS:
        bot.reply_to(msg, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    parts = msg.text.split(maxsplit=1)
    if len(parts) < 2:
        bot.reply_to(msg, "‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /–≥—Å —Ç–µ–∫—Å—Ç_—Å–æ–æ–±—â–µ–Ω–∏—è")
        return

    message_to_send = parts[1]
    count = 0
    failed = 0

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —á–∞—Ç—ã
    all_possible_chats = get_all_bot_chats()

    bot.reply_to(msg, f"üîÑ –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {len(all_possible_chats)} —á–∞—Ç(–æ–≤)...")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —á–∞—Ç—ã
    for chat_id in all_possible_chats:
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            try:
                chat_id_int = int(chat_id)
            except:
                chat_id_int = chat_id

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –≤—Å–µ –µ—â–µ –µ—Å—Ç—å –≤ —á–∞—Ç–µ
            member = bot.get_chat_member(chat_id_int, bot.get_me().id)
            if member.status in ['member', 'administrator', 'creator']:
                bot.send_message(chat_id_int, f"üì¢ <b>–ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{message_to_send}")
                count += 1

                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                try:
                    chat_info = bot.get_chat(chat_id_int)
                    save_chat_to_db(chat_id_int, chat_info.title, chat_info.type)
                except:
                    save_chat_to_db(chat_id_int)
            else:
                failed += 1

        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç {chat_id}: {e}")
            failed += 1
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –µ—Å–ª–∏ –±–æ—Ç –±–æ–ª—å—à–µ –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫
            if "bot was kicked" in str(e).lower() or "chat not found" in str(e).lower():
                chats.discard(int(chat_id) if str(chat_id).lstrip('-').isdigit() else chat_id)

    bot.send_message(msg.chat.id, f"‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\nüìä –£—Å–ø–µ—à–Ω–æ: {count} —á–∞—Ç(–æ–≤)\n‚ùå –û—à–∏–±–æ–∫: {failed}")

# --- –ö–æ–º–∞–Ω–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∞–≤–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π ---
@bot.message_handler(func=lambda msg: msg.text and msg.text.lower().startswith("+–∫–º–¥"))
def handle_grant_permission(msg):
    if msg.from_user.id not in OWNER_IDS:
        bot.reply_to(msg, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    if not msg.reply_to_message:
        bot.reply_to(msg, "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –≤—ã–¥–∞—Ç—å –ø—Ä–∞–≤–∞.")
        return

    parts = msg.text.strip().split()
    if len(parts) < 2:
        bot.reply_to(msg, "–ü—Ä–∏–º–µ—Ä: +–∫–º–¥ –∑–∞–Ω–µ—Å—Ç–∏ (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)")
        return

    command_name = parts[1].lower()
    available_commands = ["–∑–∞–Ω–µ—Å—Ç–∏", "–≤—ã–Ω–µ—Å—Ç–∏", "–∏–ø"]

    if command_name not in available_commands:
        bot.reply_to(msg, f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: {', '.join(available_commands)}")
        return

    target = msg.reply_to_message.from_user
    target_id = target.id
    target_name = target.first_name
    profile_link = f"<a href='tg://user?id={target_id}'>{target_name}</a>"

    if isinstance(target_id, int) and target_id in OWNER_IDS:
        bot.reply_to(msg, "‚ùå –í–ª–∞–¥–µ–ª–µ—Ü —É–∂–µ –∏–º–µ–µ—Ç –≤—Å–µ –ø—Ä–∞–≤–∞.")
        return

    success = grant_command_permission(target_id, command_name, msg.from_user.id, True)

    if success:
        bot.reply_to(msg, f"‚úÖ {profile_link} –ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—É '{command_name}'")
    else:
        bot.reply_to(msg, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–∞–≤.")

@bot.message_handler(func=lambda msg: msg.text and msg.text.lower().startswith("-–∫–º–¥"))
def handle_revoke_permission(msg):
    if msg.from_user.id not in OWNER_IDS:
        bot.reply_to(msg, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    if not msg.reply_to_message:
        bot.reply_to(msg, "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–Ω—è—Ç—å –ø—Ä–∞–≤–∞.")
        return

    parts = msg.text.strip().split()
    if len(parts) < 2:
        bot.reply_to(msg, "–ü—Ä–∏–º–µ—Ä: -–∫–º–¥ –∑–∞–Ω–µ—Å—Ç–∏ (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)")
        return

    command_name = parts[1].lower()
    available_commands = ["–∑–∞–Ω–µ—Å—Ç–∏", "–≤—ã–Ω–µ—Å—Ç–∏", "–∏–ø"]

    if command_name not in available_commands:
        bot.reply_to(msg, f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã: {', '.join(available_commands)}")
        return

    target = msg.reply_to_message.from_user
    target_id = target.id
    target_name = target.first_name
    profile_link = f"<a href='tg://user?id={target_id}'>{target_name}</a>"

    if isinstance(target_id, int) and target_id in OWNER_IDS:
        bot.reply_to(msg, "‚ùå –ù–µ–ª—å–∑—è –æ—Ç–Ω–∏–º–∞—Ç—å –ø—Ä–∞–≤–∞ —É –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
        return

    success = grant_command_permission(target_id, command_name, msg.from_user.id, False)

    if success:
        bot.reply_to(msg, f"‚ùå –£ {profile_link} –æ—Ç–Ω—è—Ç–æ –ø—Ä–∞–≤–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—É '{command_name}'")
    else:
        bot.reply_to(msg, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–Ω—è—Ç–∏–∏ –ø—Ä–∞–≤.")

# --- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ ---
@bot.message_handler(commands=["—á–∞—Ç—ã"])
def handle_list_chats(msg):
    if msg.from_user.id not in OWNER_IDS:
        bot.reply_to(msg, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    active_chats = []
    inactive_chats = []

    for chat_id in chats.copy():
        try:
            chat_info = bot.get_chat(chat_id)
            bot.get_chat_member(chat_id, bot.get_me().id)
            active_chats.append(f"‚Ä¢ {chat_info.title or '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç'} (ID: {chat_id})")
        except Exception as e:
            inactive_chats.append(chat_id)
            if "bot was kicked" in str(e).lower() or "chat not found" in str(e).lower():
                chats.discard(chat_id)

    response = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–æ–≤:</b>\n\n"
    response += f"‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã ({len(active_chats)}):</b>\n"
    if active_chats:
        response += "\n".join(active_chats[:20])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 20 —á–∞—Ç–æ–≤
        if len(active_chats) > 20:
            response += f"\n... –∏ –µ—â–µ {len(active_chats) - 20} —á–∞—Ç(–æ–≤)"
    else:
        response += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤"

    if inactive_chats:
        response += f"\n\n‚ùå <b>–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã ({len(inactive_chats)}):</b> —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞"

    bot.reply_to(msg, response)

# ----------------------------------------------

@bot.message_handler(content_types=['new_chat_members'])
def on_new_members(message):
    chats.add(message.chat.id)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    save_chat_to_db(message.chat.id, message.chat.title, message.chat.type)

    for user in message.new_chat_members:
        role = get_role(user.id)
        risk = get_risk(user.id)
        profile_link = f"<a href='tg://user?id={user.id}'>{user.first_name}</a>"
        
        # –ò—Å–∫–ª—é—á–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤, –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —á–∞—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
        excluded_roles = ["–≤–ª–∞–¥–µ–ª–µ—Ü", "–≤–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞", "–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π"]
        
        if role == "–Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π" and role not in excluded_roles:
            bot.send_message(
                message.chat.id,
                f"üö® –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {profile_link}\n"
                f"–†–æ–ª—å: {role}\nüìä –†–∏—Å–∫: {risk}"
            )

@bot.message_handler(func=lambda msg: msg.chat.type in ["group", "supergroup"])
def auto_check_group(msg):
    chats.add(msg.chat.id)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    save_chat_to_db(msg.chat.id, msg.chat.title, msg.chat.type)

    user = msg.from_user
    role = get_role(user.id)
    
    # –ò—Å–∫–ª—é—á–∞–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤, –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ —á–∞—Ç–∞ –∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã—Ö –∏–∑ –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏
    excluded_roles = ["–≤–ª–∞–¥–µ–ª–µ—Ü", "–≤–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞", "–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π"]
    
    if role == "—Å–∫–∞–º–µ—Ä" and role not in excluded_roles:
        profile_link = f"<a href='tg://user?id={user.id}'>{user.first_name}</a>"
        bot.reply_to(msg, f"‚ö†Ô∏è –û—Å—Ç–æ—Ä–æ–∂–Ω–æ! {profile_link} ‚Äî –°–ö–ê–ú–ï–†.")

@bot.message_handler(func=lambda msg: True)
def register_chat(msg):
    chats.add(msg.chat.id)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    save_chat_to_db(msg.chat.id, getattr(msg.chat, 'title', None), msg.chat.type)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if msg.from_user.username:
        save_username_mapping(msg.from_user.id, msg.from_user.username)

def safe_reply(msg, text):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        bot.reply_to(msg, text)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —á–µ—Ä–µ–∑ send_message –µ—Å–ª–∏ reply_to –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
            bot.send_message(msg.chat.id, text)
        except Exception as e2:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {msg.chat.id}: {e2}")

def run_bot():
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º"""
    while True:
        try:
            print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
            bot.infinity_polling(timeout=20, long_polling_timeout=10, none_stop=True)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}")
            print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥...")
            time.sleep(10)
            print("üöÄ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞...")

# –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–æ–º
run_bot()
