import telebot
import mysql.connector
from mysql.connector import Error

BOT_TOKEN = "8363145008:AAEM6OSKNRjX3SDU6yINZwbMOEcsaOQVdiI"
OWNER_IDS = [7537570296, 5821123636]

DB_HOST = "sql8.freesqldatabase.com"
DB_USER = "sql8792761"
DB_PASSWORD = "1upRsp7dLm"
DB_NAME = "sql8792761"

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")
chats = set()

import time

def get_connection():
    max_retries = 3
    for attempt in range(max_retries):
        try:
            conn = mysql.connector.connect(
                host=DB_HOST,
                user=DB_USER,
                password=DB_PASSWORD,
                database=DB_NAME,
                charset="utf8mb4",
                autocommit=True,
                connection_timeout=10,
                buffered=True
            )
            return conn
        except Error as e:
            print(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è {attempt + 1}/{max_retries} –Ω–µ—É–¥–∞—á–Ω–∞: {e}")
            if attempt < max_retries - 1:
                time.sleep(2)
            else:
                raise e

def init_db():
    max_retries = 5
    for attempt in range(max_retries):
        try:
            print(f"–ü–æ–ø—ã—Ç–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ë–î {attempt + 1}/{max_retries}...")
            conn = get_connection()
            cursor = conn.cursor()
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            cursor.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id VARCHAR(100) PRIMARY KEY,
                role VARCHAR(50) DEFAULT '–Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π',
                scam_percent VARCHAR(10) DEFAULT '50%'
            )""")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è username
            cursor.execute("""
            CREATE TABLE IF NOT EXISTS usernames (
                user_id VARCHAR(100) PRIMARY KEY,
                username VARCHAR(100)
            )""")
            
            # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è —á–∞—Ç–æ–≤
            cursor.execute("""
            CREATE TABLE IF NOT EXISTS bot_chats (
                chat_id VARCHAR(100) PRIMARY KEY,
                chat_title VARCHAR(255),
                chat_type VARCHAR(50),
                last_activity TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
            )""")
            
            conn.commit()
            cursor.close()
            conn.close()
            print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
            return
        except Error as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}): {e}")
            if attempt < max_retries - 1:
                time.sleep(5)
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")

init_db()

def get_risk(user_id):
    try:
        if isinstance(user_id, int) and user_id in OWNER_IDS:
            return "0%"
        
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT role, scam_percent FROM users WHERE user_id = %s", (str(user_id),))
        result = cursor.fetchone()
        
        if result:
            role, scam_percent = result
            cursor.close()
            conn.close()
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
            if scam_percent and scam_percent != "50%":
                return scam_percent
            # –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–ª—è —Ä–æ–ª–∏
            risks = {
                "–≤–ª–∞–¥–µ–ª–µ—Ü": "0%",
                "–≥–∞—Ä–∞–Ω—Ç": "0%",
                "–≤–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞": "10%",
                "–æ—Ç–∫–∞–∑ –æ—Ç –≥–∞—Ä–∞–Ω—Ç–∞": "80%",
                "—Å–∫–∞–º–µ—Ä": "100%",
                "–Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π": "50%"
            }
            return risks.get(role, "50%")
        else:
            cursor.close()
            conn.close()
            return "50%"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∏—Å–∫–∞ –¥–ª—è {user_id}: {e}")
        return "50%"

def get_role(user_id):
    try:
        if isinstance(user_id, int) and user_id in OWNER_IDS:
            return "–≤–ª–∞–¥–µ–ª–µ—Ü"
        
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT role FROM users WHERE user_id = %s", (str(user_id),))
        result = cursor.fetchone()
        cursor.close()
        conn.close()
        
        return result[0] if result and result[0] else "–Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–∏ –¥–ª—è {user_id}: {e}")
        return "–Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π"

@bot.message_handler(commands=["start"])
def start_command(msg):
    bot.reply_to(msg, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∞–∫—Ç–∏–≤–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.")

@bot.message_handler(commands=["help"])
def help_command(msg):
    if msg.from_user.id in OWNER_IDS:
        text = (
            "üìò –ö–æ–º–∞–Ω–¥—ã:\n"
            "‚Äî —á–µ–∫ (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)\n"
            "‚Äî –∑–∞–Ω–µ—Å—Ç–∏ (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
            "‚Äî –≤—ã–Ω–µ—Å—Ç–∏ (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
            "‚Äî –∏–ø 30 (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
            "‚Äî /–≥—Å (—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è) ‚Äî –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–æ –≤—Å–µ —á–∞—Ç—ã\n"
            "‚Äî /—á–∞—Ç—ã ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤\n"
            "\n–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ"
        )
    else:
        text = (
            "üìò –ö–æ–º–∞–Ω–¥—ã:\n"
            "‚Äî —á–µ–∫ (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤)\n"
            "‚Äî –∑–∞–Ω–µ—Å—Ç–∏ (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
            "‚Äî –≤—ã–Ω–µ—Å—Ç–∏ (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
            "\n–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ"
        )
    bot.reply_to(msg, text)

def get_user_by_username(username):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç username –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ ID"""
    try:
        # –£–±–∏—Ä–∞–µ–º @ –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        username = username.lstrip('@')
        
        # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ä–∞–∑–Ω—ã–µ –º–µ—Ç–æ–¥—ã
        user_info = None
        
        # –ú–µ—Ç–æ–¥ 1: –ü—Ä—è–º–æ–π –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ API
        try:
            user_info = bot.get_chat(f"@{username}")
        except:
            pass
            
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        if user_info is None:
            return None
            
        return user_info
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username {username}: {e}")
        return None

def save_username_mapping(user_id, username):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–≤—è–∑—å user_id -> username –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = get_connection()
        cursor = conn.cursor()
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º username
        cursor.execute(
            "REPLACE INTO usernames (user_id, username) VALUES (%s, %s)",
            (str(user_id), username)
        )
        cursor.close()
        conn.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ username –¥–ª—è {user_id}: {e}")

def find_user_by_username(username):
    """–ò—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        username = username.lstrip('@')
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT user_id FROM usernames WHERE username = %s", (username,))
        result = cursor.fetchone()
        cursor.close()
        conn.close()
        return result[0] if result else None
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ username {username} –≤ –ë–î: {e}")
        return None

@bot.message_handler(func=lambda msg: msg.text and msg.text.lower().startswith("—á–µ–∫"))
def handle_check(msg):
    chats.add(msg.chat.id)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ reply –∏–ª–∏ –∞–≤—Ç–æ—Ä–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    user = msg.reply_to_message.from_user if msg.reply_to_message else msg.from_user
    user_id = user.id
    user_name = user.first_name
    role = get_role(user_id)
    risk = get_risk(user_id)
    profile_link = f"<a href='tg://user?id={user_id}'>{user_name}</a>"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º username –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if user.username:
        save_username_mapping(user_id, user.username)

    text = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å: {profile_link}\n"
        f"üîπ –†–æ–ª—å: {role}\n"
        f"üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∫–∞–º–∞: {risk}"
    )
    bot.reply_to(msg, text)

@bot.message_handler(func=lambda msg: msg.text and msg.text.lower().startswith("–∑–∞–Ω–µ—Å—Ç–∏"))
def handle_add_role(msg):
    chats.add(msg.chat.id)
    caller_role = get_role(msg.from_user.id)

    if msg.chat.type != "private":
        if msg.from_user.id not in OWNER_IDS and caller_role not in ["–≥–∞—Ä–∞–Ω—Ç", "–≤–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞"]:
            return

    if not msg.reply_to_message:
        bot.reply_to(msg, "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–Ω–µ—Å—Ç–∏.")
        return

    parts = msg.text.strip().split()
    if len(parts) < 2:
        bot.reply_to(msg, "–ü—Ä–∏–º–µ—Ä: –∑–∞–Ω–µ—Å—Ç–∏ —Å–∫–∞–º–µ—Ä (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)")
        return

    role = parts[1].lower()
    target = msg.reply_to_message.from_user
    target_id = target.id
    target_name = target.first_name
    profile_link = f"<a href='tg://user?id={target.id}'>{target.first_name}</a>"

    allowed_roles = ["—Å–∫–∞–º–µ—Ä", "–≥–∞—Ä–∞–Ω—Ç", "–≤–ª–∞–¥–µ–ª–µ—Ü_—á–∞—Ç–∞", "–æ—Ç–∫–∞–∑", "–æ—Ç–∫–∞–∑_–æ—Ç_–≥–∞—Ä–∞–Ω—Ç–∞"]
    if role not in allowed_roles:
        bot.reply_to(msg, "–†–æ–ª–∏: —Å–∫–∞–º–µ—Ä, –≥–∞—Ä–∞–Ω—Ç, –≤–ª–∞–¥–µ–ª–µ—Ü_—á–∞—Ç–∞, –æ—Ç–∫–∞–∑, –æ—Ç–∫–∞–∑_–æ—Ç_–≥–∞—Ä–∞–Ω—Ç–∞")
        return

    if caller_role in ["–≥–∞—Ä–∞–Ω—Ç", "–≤–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞"] and role == "–≥–∞—Ä–∞–Ω—Ç":
        bot.reply_to(msg, "‚ùå –ù–µ–ª—å–∑—è –∑–∞–Ω–æ—Å–∏—Ç—å –≥–∞—Ä–∞–Ω—Ç–æ–≤.")
        return

    if isinstance(target_id, int) and target_id in OWNER_IDS:
        bot.reply_to(msg, "‚ùå –ù–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å —Ä–æ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü—É.")
        return

    if role.startswith("–æ—Ç–∫–∞–∑"):
        role_text = "–æ—Ç–∫–∞–∑ –æ—Ç –≥–∞—Ä–∞–Ω—Ç–∞"
        scam_percent = "80%"
    elif role == "–≤–ª–∞–¥–µ–ª–µ—Ü_—á–∞—Ç–∞":
        role_text = "–≤–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞"
        scam_percent = "10%"
    elif role == "—Å–∫–∞–º–µ—Ä":
        role_text = "—Å–∫–∞–º–µ—Ä"
        scam_percent = "100%"
    elif role == "–≥–∞—Ä–∞–Ω—Ç":
        role_text = "–≥–∞—Ä–∞–Ω—Ç"
        scam_percent = "0%"
    else:
        role_text = role
        scam_percent = "50%"

    try:
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute(
            "REPLACE INTO users (user_id, role, scam_percent) VALUES (%s, %s, %s)",
            (str(target_id), role_text, scam_percent)
        )
        conn.commit()
        cursor.close()
        conn.close()
    except Error as e:
        bot.reply_to(msg, f"–û—à–∏–±–∫–∞ –ë–î: {e}")
        return

    if role_text == "—Å–∫–∞–º–µ—Ä":
        alert = f"‚ö†Ô∏è {profile_link} –∑–∞–Ω–µ—Å—ë–Ω –∫–∞–∫ <b>–°–ö–ê–ú–ï–†</b>!"
        for chat_id in chats:
            try:
                bot.send_message(chat_id, alert)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç {chat_id}: {e}")

    bot.reply_to(msg, f"{profile_link} ‚úÖ –∑–∞–Ω–µ—Å—ë–Ω –∫–∞–∫ {role_text.upper()}")

@bot.message_handler(func=lambda msg: msg.text and msg.text.lower().startswith("–≤—ã–Ω–µ—Å—Ç–∏"))
def handle_remove_user(msg):
    chats.add(msg.chat.id)
    caller_role = get_role(msg.from_user.id)

    if msg.chat.type != "private":
        if msg.from_user.id not in OWNER_IDS and caller_role not in ["–≥–∞—Ä–∞–Ω—Ç", "–≤–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞"]:
            return

    if not msg.reply_to_message:
        bot.reply_to(msg, "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–Ω–µ—Å—Ç–∏.")
        return

    target = msg.reply_to_message.from_user
    target_id = target.id
    profile_link = f"<a href='tg://user?id={target.id}'>{target.first_name}</a>"

    if isinstance(target_id, int) and target_id in OWNER_IDS:
        bot.reply_to(msg, "‚ùå –ù–µ–ª—å–∑—è –≤—ã–Ω–æ—Å–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
        return

    try:
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("DELETE FROM users WHERE user_id = %s", (str(target_id),))
        if cursor.rowcount > 0:
            conn.commit()
            bot.reply_to(msg, f"‚úÖ {profile_link} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã")
        else:
            bot.reply_to(msg, f"‚ùå {profile_link} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        cursor.close()
        conn.close()
    except Error as e:
        bot.reply_to(msg, f"–û—à–∏–±–∫–∞ –ë–î: {e}")

@bot.message_handler(func=lambda msg: msg.text and msg.text.lower().startswith("–∏–ø"))
def handle_change_scam_percent(msg):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥—É –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü
    if msg.from_user.id not in OWNER_IDS:
        bot.reply_to(msg, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
        
    if not msg.reply_to_message:
        bot.reply_to(msg, "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–º—É —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç.")
        return
    parts = msg.text.strip().split()
    if len(parts) != 2 or not parts[1].isdigit():
        bot.reply_to(msg, "–ü—Ä–∏–º–µ—Ä: –∏–ø 30 (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)")
        return

    target = msg.reply_to_message.from_user
    target_id = target.id
    percent = parts[1] + "%"
    profile_link = f"<a href='tg://user?id={target.id}'>{target.first_name}</a>"

    try:
        conn = get_connection()
        cursor = conn.cursor()
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ
        cursor.execute("SELECT user_id FROM users WHERE user_id = %s", (str(target_id),))
        user_exists = cursor.fetchone()
        
        if user_exists:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute(
                "UPDATE users SET scam_percent = %s WHERE user_id = %s",
                (percent, str(target_id))
            )
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–∞—Å—Ç–æ–º–Ω—ã–º –ø—Ä–æ—Ü–µ–Ω—Ç–æ–º
            cursor.execute(
                "INSERT INTO users (user_id, role, scam_percent) VALUES (%s, %s, %s)",
                (str(target_id), "–Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π", percent)
            )
        
        conn.commit()
        cursor.close()
        conn.close()
        bot.reply_to(msg, f"‚úÖ –ü—Ä–æ—Ü–µ–Ω—Ç —Å–∫–∞–º–∞ –¥–ª—è {profile_link} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ {percent}")
    except Error as e:
        bot.reply_to(msg, f"–û—à–∏–±–∫–∞ –ë–î: {e}")

def get_all_bot_chats():
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ —á–∞—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≥–¥–µ –±–æ—Ç –∫–æ–≥–¥–∞-–ª–∏–±–æ –±—ã–ª –∞–∫—Ç–∏–≤–µ–Ω"""
    try:
        conn = get_connection()
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —á–∞—Ç—ã –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT chat_id FROM bot_chats")
        db_chats = [row[0] for row in cursor.fetchall()]
        
        cursor.close()
        conn.close()
        
        # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Ç–µ–∫—É—â–∏–º–∏ –∞–∫—Ç–∏–≤–Ω—ã–º–∏ —á–∞—Ç–∞–º–∏
        all_chats = set(db_chats + [str(chat_id) for chat_id in chats])
        return all_chats
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–æ–≤ –∏–∑ –ë–î: {e}")
        return set(str(chat_id) for chat_id in chats)

def save_chat_to_db(chat_id, chat_title=None, chat_type=None):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    try:
        conn = get_connection()
        cursor = conn.cursor()
        
        cursor.execute("""
        REPLACE INTO bot_chats (chat_id, chat_title, chat_type) 
        VALUES (%s, %s, %s)
        """, (str(chat_id), chat_title, chat_type))
        
        cursor.close()
        conn.close()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —á–∞—Ç–∞ {chat_id} –≤ –ë–î: {e}")

# --- –î–æ–±–∞–≤–ª–µ–Ω–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è ---
@bot.message_handler(commands=["–≥—Å"])
def handle_global_message(msg):
    if msg.from_user.id not in OWNER_IDS:
        bot.reply_to(msg, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return

    parts = msg.text.split(maxsplit=1)
    if len(parts) < 2:
        bot.reply_to(msg, "‚ùóÔ∏è –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /–≥—Å —Ç–µ–∫—Å—Ç_—Å–æ–æ–±—â–µ–Ω–∏—è")
        return

    message_to_send = parts[1]
    count = 0
    failed = 0

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ —á–∞—Ç—ã
    all_possible_chats = get_all_bot_chats()
    
    bot.reply_to(msg, f"üîÑ –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –≥–ª–æ–±–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ {len(all_possible_chats)} —á–∞—Ç(–æ–≤)...")

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤–æ –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —á–∞—Ç—ã
    for chat_id in all_possible_chats:
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ int –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
            try:
                chat_id_int = int(chat_id)
            except:
                chat_id_int = chat_id
                
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –≤—Å–µ –µ—â–µ –µ—Å—Ç—å –≤ —á–∞—Ç–µ
            member = bot.get_chat_member(chat_id_int, bot.get_me().id)
            if member.status in ['member', 'administrator', 'creator']:
                bot.send_message(chat_id_int, f"üì¢ <b>–ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{message_to_send}")
                count += 1
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                try:
                    chat_info = bot.get_chat(chat_id_int)
                    save_chat_to_db(chat_id_int, chat_info.title, chat_info.type)
                except:
                    save_chat_to_db(chat_id_int)
            else:
                failed += 1
                
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç {chat_id}: {e}")
            failed += 1
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ –µ—Å–ª–∏ –±–æ—Ç –±–æ–ª—å—à–µ –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫
            if "bot was kicked" in str(e).lower() or "chat not found" in str(e).lower():
                chats.discard(int(chat_id) if str(chat_id).lstrip('-').isdigit() else chat_id)

    bot.send_message(msg.chat.id, f"‚úÖ –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!\nüìä –£—Å–ø–µ—à–Ω–æ: {count} —á–∞—Ç(–æ–≤)\n‚ùå –û—à–∏–±–æ–∫: {failed}")

# --- –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤ ---
@bot.message_handler(commands=["—á–∞—Ç—ã"])
def handle_list_chats(msg):
    if msg.from_user.id not in OWNER_IDS:
        bot.reply_to(msg, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    
    active_chats = []
    inactive_chats = []
    
    for chat_id in chats.copy():
        try:
            chat_info = bot.get_chat(chat_id)
            bot.get_chat_member(chat_id, bot.get_me().id)
            active_chats.append(f"‚Ä¢ {chat_info.title or '–ü—Ä–∏–≤–∞—Ç–Ω—ã–π —á–∞—Ç'} (ID: {chat_id})")
        except Exception as e:
            inactive_chats.append(chat_id)
            if "bot was kicked" in str(e).lower() or "chat not found" in str(e).lower():
                chats.discard(chat_id)
    
    response = f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–æ–≤:</b>\n\n"
    response += f"‚úÖ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã ({len(active_chats)}):</b>\n"
    if active_chats:
        response += "\n".join(active_chats[:20])  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–∞–∫—Å–∏–º—É–º 20 —á–∞—Ç–æ–≤
        if len(active_chats) > 20:
            response += f"\n... –∏ –µ—â–µ {len(active_chats) - 20} —á–∞—Ç(–æ–≤)"
    else:
        response += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤"
    
    if inactive_chats:
        response += f"\n\n‚ùå <b>–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã ({len(inactive_chats)}):</b> —É–¥–∞–ª–µ–Ω—ã –∏–∑ —Å–ø–∏—Å–∫–∞"
    
    bot.reply_to(msg, response)

# ----------------------------------------------

@bot.message_handler(content_types=['new_chat_members'])
def on_new_members(message):
    chats.add(message.chat.id)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    save_chat_to_db(message.chat.id, message.chat.title, message.chat.type)
    
    for user in message.new_chat_members:
        role = get_role(user.id)
        risk = get_risk(user.id)
        profile_link = f"<a href='tg://user?id={user.id}'>{user.first_name}</a>"
        if role == "–Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π":
            bot.send_message(
                message.chat.id,
                f"üö® –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {profile_link}\n"
                f"–†–æ–ª—å: {role}\nüìä –†–∏—Å–∫: {risk}"
            )

@bot.message_handler(func=lambda msg: msg.chat.type in ["group", "supergroup"])
def auto_check_group(msg):
    chats.add(msg.chat.id)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    save_chat_to_db(msg.chat.id, msg.chat.title, msg.chat.type)
    
    user = msg.from_user
    role = get_role(user.id)
    if role == "—Å–∫–∞–º–µ—Ä":
        profile_link = f"<a href='tg://user?id={user.id}'>{user.first_name}</a>"
        bot.reply_to(msg, f"‚ö†Ô∏è –û—Å—Ç–æ—Ä–æ–∂–Ω–æ! {profile_link} ‚Äî –°–ö–ê–ú–ï–†.")

@bot.message_handler(func=lambda msg: True)
def register_chat(msg):
    chats.add(msg.chat.id)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    save_chat_to_db(msg.chat.id, getattr(msg.chat, 'title', None), msg.chat.type)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
    if msg.from_user.username:
        save_username_mapping(msg.from_user.id, msg.from_user.username)

print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
try:
    bot.infinity_polling()
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
