import asyncio
import json
import os
from aiogram import Bot, Dispatcher, F
from aiogram.enums import ChatType, ParseMode
from aiogram.types import Message
from aiogram.client.default import DefaultBotProperties
from asyncio import Lock

BOT_TOKEN = os.getenv("BOT_TOKEN") or "8363145008:AAEM6OSKNRjX3SDU6yINZwbMOEcsaOQVdiI"
OWNER_ID = 7537570296  # —Ç–≤–æ–π Telegram ID

db_path = "mid_base.json"
db_lock = Lock()  # –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –∑–∞–ø–∏—Å–∏

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
if os.path.exists(db_path):
    with open(db_path, "r", encoding="utf-8") as f:
        db = json.load(f)
else:
    db = {"users": {}, "banned": [], "reports": {}}

async def save_db():
    async with db_lock:
        with open(db_path, "w", encoding="utf-8") as f:
            json.dump(db, f, ensure_ascii=False, indent=4)

def get_role(user_id: int) -> str:
    if str(user_id) == str(OWNER_ID):
        return "–≤–ª–∞–¥–µ–ª–µ—Ü"
    return db["users"].get(str(user_id), "–∏–≥—Ä–æ–∫")

def get_risk(role: str) -> str:
    return {
        "–≤–ª–∞–¥–µ–ª–µ—Ü": "0%",
        "–≥–∞—Ä–∞–Ω—Ç": "0%",
        "—Å–∫–∞–º–µ—Ä": "100%",
        "–∏–≥—Ä–æ–∫": "50% (–ª—É—á—à–µ —Ö–æ–¥–∏—Ç—å –≥–∞—Ä–∞–Ω—Ç–æ–º)"
    }.get(role, "50%")

bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

@dp.message(F.text.lower() == "—Å—Ç–∞—Ä—Ç")
async def start_cmd(msg: Message):
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –∞–∫—Ç–∏–≤–µ–Ω.")

@dp.message(F.text.lower().startswith("—á–µ–∫"))
async def check_profile(msg: Message):
    user = msg.reply_to_message.from_user if msg.reply_to_message else msg.from_user
    role = get_role(user.id)
    risk = get_risk(role)
    text = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å: <a href='tg://user?id={user.id}'>{user.first_name}</a>\n"
        f"üîπ –†–æ–ª—å: <code>{role}</code>\n"
        f"üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∫–∞–º–∞: <code>{risk}</code>"
    )
    await msg.reply(text)

@dp.message(F.text.lower().startswith("–∑–∞–Ω–µ—Å—Ç–∏"))
async def set_role(msg: Message):
    if msg.chat.type != ChatType.PRIVATE and msg.from_user.id != OWNER_ID:
        return

    if not msg.reply_to_message:
        return await msg.reply("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    parts = msg.text.split()
    if len(parts) < 2:
        return await msg.reply("–ü—Ä–∏–º–µ—Ä: –∑–∞–Ω–µ—Å—Ç–∏ —Å–∫–∞–º–µ—Ä")

    role = parts[1].lower()
    if role not in ["—Å–∫–∞–º–µ—Ä", "–≥–∞—Ä–∞–Ω—Ç"]:
        return await msg.reply("–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ä–æ–ª–∏: —Å–∫–∞–º–µ—Ä, –≥–∞—Ä–∞–Ω—Ç")

    target = msg.reply_to_message.from_user
    if target.id == OWNER_ID:
        return await msg.reply("–ù–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å —Ä–æ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü—É.")

    db["users"][str(target.id)] = role
    await save_db()
    await msg.reply(f"{target.first_name} ‚ÄºÔ∏è –ó–ê–ù–ï–°–ï–ù –í –ë–ê–ó–£ –ö–ê–ö {role.upper()}")

@dp.message(F.text.lower() == "–∫–æ–º–∞–Ω–¥—ã")
async def commands_list(msg: Message):
    text = (
        "üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n\n"
        "—Å—Ç–∞—Ä—Ç ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω\n"
        "—á–µ–∫ ‚Äî –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Å–≤–æ—ë)\n"
        "–∑–∞–Ω–µ—Å—Ç–∏ <—Ä–æ–ª—å> ‚Äî –î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É —Ä–æ–ª–µ–π (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ). –†–æ–ª–∏: —Å–∫–∞–º–µ—Ä, –≥–∞—Ä–∞–Ω—Ç\n"
        "–∫–æ–º–∞–Ω–¥—ã ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"
    )
    await msg.reply(text, parse_mode=ParseMode.HTML)

@dp.message(F.chat.type.in_({"group", "supergroup"}))
async def warn_scammer(msg: Message):
    if not msg.from_user:
        return
    role = get_role(msg.from_user.id)
    if role == "—Å–∫–∞–º–µ—Ä":
        await msg.reply(
            f"‚ö†Ô∏è –û—Å—Ç–æ—Ä–æ–∂–Ω–æ! –ò–≥—Ä–æ–∫ <a href='tg://user?id={msg.from_user.id}'>{msg.from_user.first_name}</a> –∑–∞–Ω–µ—Å—ë–Ω –≤ –±–∞–∑—É –∫–∞–∫ <b>–°–ö–ê–ú–ï–†</b>.",
            parse_mode=ParseMode.HTML
        )

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
