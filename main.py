import asyncio
import json
import os
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.enums import ChatType
from aiogram.filters import Command, CommandStart

BOT_TOKEN = '8434117020:AAETWdA3rkW_0M2IDtqvVWbFCTcIdTr0eiY'
OWNER_ID = 7537570296  # —Ç–≤–æ–π Telegram ID

db_path = "mid_base.json"
if os.path.exists(db_path):
    with open(db_path, "r") as f:
        db = json.load(f)
else:
    db = {"users": {}, "banned": [], "reports": {}}


def save_db():
    with open(db_path, "w") as f:
        json.dump(db, f, indent=4)


def get_role(user_id: int) -> str:
    if str(user_id) == str(OWNER_ID):
        return "–≤–ª–∞–¥–µ–ª–µ—Ü"
    return db["users"].get(str(user_id), "–∏–≥—Ä–æ–∫")


def get_risk(role: str) -> str:
    return {
        "–≤–ª–∞–¥–µ–ª–µ—Ü": "0%",
        "–≥–∞—Ä–∞–Ω—Ç": "0%",
        "—Å–∫–∞–º–µ—Ä": "100%",
        "–∏–≥—Ä–æ–∫": "50% (–ª—É—á—à–µ —Ö–æ–¥–∏—Ç—å –≥–∞—Ä–∞–Ω—Ç–æ–º)"
    }.get(role, "50%")


bot = Bot(BOT_TOKEN, parse_mode="HTML")
dp = Dispatcher()


@dp.message(Command("start"))
async def start_cmd(msg: Message):
    await msg.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –∞–∫—Ç–∏–≤–µ–Ω.")


@dp.message(Command("—á–µ–∫"))
async def check_profile(msg: Message):
    user = msg.reply_to_message.from_user if msg.reply_to_message else msg.from_user
    role = get_role(user.id)
    risk = get_risk(role)

    text = (
        f"üë§ –ü—Ä–æ—Ñ–∏–ª—å: <a href='tg://user?id={user.id}'>{user.first_name}</a>\n"
        f"üîπ –†–æ–ª—å: <code>{role}</code>\n"
        f"üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∫–∞–º–∞: <code>{risk}</code>"
    )
    await msg.reply(text)


@dp.message(F.text.startswith("–∑–∞–Ω–µ—Å—Ç–∏"))
async def set_role(msg: Message):
    if msg.chat.type != ChatType.PRIVATE and msg.from_user.id != OWNER_ID:
        return

    if not msg.reply_to_message:
        return await msg.reply("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    parts = msg.text.split()
    if len(parts) < 2:
        return await msg.reply("–ü—Ä–∏–º–µ—Ä: –∑–∞–Ω–µ—Å—Ç–∏ —Å–∫–∞–º–µ—Ä")

    role = parts[1].lower()
    if role not in ["—Å–∫–∞–º–µ—Ä", "–≥–∞—Ä–∞–Ω—Ç"]:
        return await msg.reply("–î–æ–ø—É—Å—Ç–∏–º—ã–µ —Ä–æ–ª–∏: —Å–∫–∞–º–µ—Ä, –≥–∞—Ä–∞–Ω—Ç")

    target = msg.reply_to_message.from_user
    if target.id == OWNER_ID:
        return await msg.reply("–ù–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å —Ä–æ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü—É.")

    db["users"][str(target.id)] = role
    save_db()
    await msg.reply(f"{target.first_name} —Ç–µ–ø–µ—Ä—å {role.upper()}")


@dp.message(F.chat.type.in_({"group", "supergroup"}))
async def tag_scammers(msg: Message):
    if not msg.from_user:
        return
    role = get_role(msg.from_user.id)
    if role == "—Å–∫–∞–º–µ—Ä":
        await msg.reply("‚ö†Ô∏è –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–Ω–µ—Å—ë–Ω –∫–∞–∫ <b>–°–ö–ê–ú–ï–†</b>")


@dp.message(F.text == "–∂–∞–ª–æ–±–∞")
async def report_user(msg: Message):
    if not msg.reply_to_message:
        return await msg.reply("–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ.")

    sender = msg.from_user
    reported = msg.reply_to_message.from_user

    now = asyncio.get_event_loop().time()
    key = str(sender.id)
    reports = db["reports"].get(key, {"count": 0, "time": now})

    if now - float(reports["time"]) > 86400:
        reports = {"count": 0, "time": now}

    if reports["count"] >= 5:
        return await msg.reply("–í—ã –∏—Å—á–µ—Ä–ø–∞–ª–∏ –ª–∏–º–∏—Ç –∂–∞–ª–æ–± –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")

    reports["count"] += 1
    reports["time"] = now
    db["reports"][key] = reports
    save_db()

    text = (
        f"üö® <b>–ñ–∞–ª–æ–±–∞</b>\n"
        f"üë§ –û—Ç: <a href='tg://user?id={sender.id}'>{sender.first_name}</a>\n"
        f"üìå –ù–∞: <a href='tg://user?id={reported.id}'>{reported.first_name}</a>\n"
        f"üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ: {msg.reply_to_message.text}"
    )

    for uid, role in db["users"].items():
        if role == "–≥–∞—Ä–∞–Ω—Ç" and int(uid) not in [sender.id, reported.id]:
            try:
                await bot.send_message(int(uid), text)
            except:
                continue

    if OWNER_ID not in [sender.id, reported.id]:
        await bot.send_message(OWNER_ID, text)

    await msg.reply("–ñ–∞–ª–æ–±–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")


@dp.message(Command("—Å–µ—Ç–∫–∞ –±–∞–Ω"))
async def net_ban(msg: Message):
    if msg.from_user.id != OWNER_ID:
        return

    if not msg.reply_to_message:
        return await msg.reply("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")

    user = msg.reply_to_message.from_user
    db["banned"].append(user.id)
    save_db()
    await msg.reply(f"{user.first_name} —Ç–µ–ø–µ—Ä—å –≤ –≥–ª–æ–±–∞–ª—å–Ω–æ–º –±–∞–Ω–µ (—Å–∫–∞–º–µ—Ä)")


@dp.message(F.new_chat_members)
async def check_ban_on_join(msg: Message):
    for user in msg.new_chat_members:
        if user.id in db["banned"]:
            await bot.ban_chat_member(msg.chat.id, user.id)
            await msg.reply(f"üö´ {user.first_name} –∑–∞–±–∞–Ω–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ –∫–∞–∫ –°–ö–ê–ú–ï–†.")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
