
import telebot
import mysql.connector
from mysql.connector import Error
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton

BOT_TOKEN = "8363145008:AAEM6OSKNRjX3SDU6yINZwbMOEcsaOQVdiI"
OWNER_IDS = [7537570296, 5821123636]
# –°–ª–æ–≤–∞—Ä—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è username –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ (–±–µ–∑ @)
OWNER_USERNAMES = {
    "midgarant": 7537570296,  # –≤–∞—à username –≤ –Ω–∏–∂–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    "MidGarant": 7537570296,  # –¥—É–±–ª–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    # –¥–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏—Ö –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
}

DB_HOST = "sql8.freesqldatabase.com"
DB_USER = "sql8792761"
DB_PASSWORD = "1upRsp7dLm"
DB_NAME = "sql8792761"

bot = telebot.TeleBot(BOT_TOKEN, parse_mode="HTML")
chats = set()

def get_connection():
    return mysql.connector.connect(
        host=DB_HOST,
        user=DB_USER,
        password=DB_PASSWORD,
        database=DB_NAME,
        charset="utf8mb4"
    )

def init_db():
    try:
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS users (
                user_id VARCHAR(100) PRIMARY KEY,
                username VARCHAR(100),
                role VARCHAR(50) DEFAULT '–Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π',
                scam_percent VARCHAR(10) DEFAULT '50%'
            )
        """)
        conn.commit()
        cursor.close()
        conn.close()
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü—ã: {e}")

init_db()

def get_risk(role):
    risks = {
        "–≤–ª–∞–¥–µ–ª–µ—Ü": "0%",
        "–≥–∞—Ä–∞–Ω—Ç": "0%",
        "–≤–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞": "10%",
        "–æ—Ç–∫–∞–∑ –æ—Ç –≥–∞—Ä–∞–Ω—Ç–∞": "80%",
        "—Å–∫–∞–º–µ—Ä": "100%",
        "–Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π": "50%"
    }
    return risks.get(role, "50%")

def normalize_user_id(user_id, username=None):
    """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç username —Å @"""
    if username:
        return f"@{username.lower()}"
    return str(user_id)

def get_user_role(user_id, username=None):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –ø–æ ID
        if isinstance(user_id, int) and user_id in OWNER_IDS:
            return "–≤–ª–∞–¥–µ–ª–µ—Ü"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –ø–æ username
        if username and username.lower() in [k.lower() for k in OWNER_USERNAMES.keys()]:
            return "–≤–ª–∞–¥–µ–ª–µ—Ü"
        
        conn = get_connection()
        cursor = conn.cursor()
        
        # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω username, –∏—â–µ–º –ø–æ –Ω–µ–º—É
        if username:
            cursor.execute("SELECT role FROM users WHERE LOWER(user_id) = LOWER(%s) OR LOWER(user_id) = LOWER(%s)", 
                          (f"@{username}", username))
            result = cursor.fetchone()
            if result and result[0]:
                cursor.close()
                conn.close()
                return result[0]
        
        # –ò—â–µ–º –ø–æ ID
        if user_id:
            cursor.execute("SELECT role FROM users WHERE user_id = %s", (str(user_id),))
            result = cursor.fetchone()
            if result and result[0]:
                cursor.close()
                conn.close()
                return result[0]
        
        cursor.close()
        conn.close()
        return "–Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π"
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–æ–ª–∏: {e}")
        return "–Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π"

def save_user_role(user_id, username, role, scam_percent):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –µ–¥–∏–Ω–æ–π –ª–æ–≥–∏–∫–æ–π"""
    try:
        normalized_id = normalize_user_id(user_id, username)
        
        conn = get_connection()
        cursor = conn.cursor()
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("DELETE FROM users WHERE user_id = %s OR LOWER(user_id) = LOWER(%s)", 
                      (str(user_id), f"@{username.lower()}" if username else ""))
        
        if username:
            cursor.execute("DELETE FROM users WHERE LOWER(username) = LOWER(%s)", (username,))
        
        # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        cursor.execute(
            "INSERT INTO users (user_id, username, role, scam_percent) VALUES (%s, %s, %s, %s)",
            (normalized_id, username.lower() if username else None, role, scam_percent)
        )
        
        conn.commit()
        cursor.close()
        conn.close()
        return True
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ä–æ–ª–∏: {e}")
        return False

def delete_user(user_id, username):
    """–£–¥–∞–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î"""
    try:
        conn = get_connection()
        cursor = conn.cursor()
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω—ã–µ –∑–∞–ø–∏—Å–∏
        cursor.execute("DELETE FROM users WHERE user_id = %s OR LOWER(user_id) = LOWER(%s)", 
                      (str(user_id), f"@{username.lower()}" if username else ""))
        
        if username:
            cursor.execute("DELETE FROM users WHERE LOWER(username) = LOWER(%s)", (username,))
        
        rowcount = cursor.rowcount
        conn.commit()
        cursor.close()
        conn.close()
        return rowcount > 0
    except Error as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}")
        return False

def format_user_profile(user_id, username, first_name):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if username:
        return f"<a href='https://t.me/{username}'>@{username}</a>"
    else:
        return f"<a href='tg://user?id={user_id}'>{first_name}</a>"

def get_all_scammers():
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö —Å–∫–∞–º–µ—Ä–æ–≤ –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ—Ç–∫–∞–∑–æ–º –æ—Ç –≥–∞—Ä–∞–Ω—Ç–∞"""
    try:
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT user_id, username, role FROM users WHERE role IN ('—Å–∫–∞–º–µ—Ä', '–æ—Ç–∫–∞–∑ –æ—Ç –≥–∞—Ä–∞–Ω—Ç–∞')")
        results = cursor.fetchall()
        cursor.close()
        conn.close()
        return results
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–∫–∞–º–µ—Ä–æ–≤: {e}")
        return []

def create_admin_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    markup = InlineKeyboardMarkup()
    markup.row(InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ —Å–∫–∞–º–µ—Ä–æ–≤", callback_data="list_scammers"))
    markup.row(InlineKeyboardButton("üö´ –°–ø–∏—Å–æ–∫ –æ—Ç–∫–∞–∑–æ–≤ –æ—Ç –≥–∞—Ä–∞–Ω—Ç–∞", callback_data="list_refuses"))
    markup.row(InlineKeyboardButton("üìä –í—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ", callback_data="list_all"))
    markup.row(InlineKeyboardButton("üë• –í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏", callback_data="list_users"))
    markup.row(InlineKeyboardButton("‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", callback_data="edit_user"))
    markup.row(InlineKeyboardButton("üîÑ –û–±–Ω–æ–≤–∏—Ç—å", callback_data="refresh_admin"))
    return markup

def create_edit_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    markup = InlineKeyboardMarkup()
    markup.row(InlineKeyboardButton("üî¥ –°–∫–∞–º–µ—Ä (100%)", callback_data="edit_role_scammer"))
    markup.row(InlineKeyboardButton("üü° –û—Ç–∫–∞–∑ –æ—Ç –≥–∞—Ä–∞–Ω—Ç–∞ (80%)", callback_data="edit_role_refuse"))
    markup.row(InlineKeyboardButton("üü¢ –ì–∞—Ä–∞–Ω—Ç (0%)", callback_data="edit_role_garant"))
    markup.row(InlineKeyboardButton("üîµ –í–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞ (10%)", callback_data="edit_role_owner"))
    markup.row(InlineKeyboardButton("‚ö™ –ù–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π (50%)", callback_data="edit_role_unverified"))
    markup.row(InlineKeyboardButton("üî¢ –ò–∑–º–µ–Ω–∏—Ç—å –ø—Ä–æ—Ü–µ–Ω—Ç", callback_data="edit_percent"))
    markup.row(InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∏–∑ –ë–î", callback_data="edit_delete"))
    markup.row(InlineKeyboardButton("‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="refresh_admin"))
    return markup

def get_all_users():
    """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ –ë–î"""
    try:
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT user_id, username, role, scam_percent FROM users ORDER BY role")
        results = cursor.fetchall()
        cursor.close()
        conn.close()
        return results
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return []

def update_user_role_by_id(user_id, new_role, new_percent):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ä–æ–ª—å –∏ –ø—Ä–æ—Ü–µ–Ω—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ ID"""
    try:
        conn = get_connection()
        cursor = conn.cursor()
        cursor.execute("UPDATE users SET role = %s, scam_percent = %s WHERE user_id = %s", 
                      (new_role, new_percent, user_id))
        rowcount = cursor.rowcount
        conn.commit()
        cursor.close()
        conn.close()
        return rowcount > 0
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return False

# –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
edit_sessions = {}

@bot.message_handler(commands=["start"])
def start_command(msg):
    bot.reply_to(msg, "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –∞–∫—Ç–∏–≤–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π /help, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.")

@bot.message_handler(commands=["help"])
def help_command(msg):
    text = (
        "<b>üìò –ö–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚Äî <code>—á–µ–∫</code> (–≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ–±—è)\n"
        "‚Äî <code>–∑–∞–Ω–µ—Å—Ç–∏</code> (—Ç–æ–ª—å–∫–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
        "‚Äî <code>–≤—ã–Ω–µ—Å—Ç–∏</code> (—Ç–æ–ª—å–∫–æ –≤ –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)\n"
        "\n"
        "–ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç ‚úÖ"
    )
    bot.reply_to(msg, text)

@bot.message_handler(commands=["admin"])
def admin_panel(msg):
    """–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å —Ç–æ–ª—å–∫–æ –¥–ª—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–≤ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–∞—Ö"""
    if msg.chat.type != "private":
        return
    
    if msg.from_user.id not in OWNER_IDS:
        bot.reply_to(msg, "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏")
        return
    
    markup = create_admin_keyboard()
    bot.reply_to(msg, "üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.callback_query_handler(func=lambda call: True)
def handle_admin_callbacks(call):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    if call.from_user.id not in OWNER_IDS:
        bot.answer_callback_query(call.id, "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
        return
    
    try:
        if call.data == "list_scammers":
            scammers = get_all_scammers()
            scammer_list = [user for user in scammers if user[2] == "—Å–∫–∞–º–µ—Ä"]
            
            if not scammer_list:
                text = "üìã <b>–°–ø–∏—Å–æ–∫ —Å–∫–∞–º–µ—Ä–æ–≤:</b>\n\n‚ùå –°–∫–∞–º–µ—Ä–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            else:
                text = f"üìã <b>–°–ø–∏—Å–æ–∫ —Å–∫–∞–º–µ—Ä–æ–≤ ({len(scammer_list)}):</b>\n\n"
                for user_id, username, role in scammer_list:
                    if user_id.startswith("@"):
                        text += f"‚Ä¢ <a href='https://t.me/{user_id[1:]}'>{user_id}</a>\n"
                    else:
                        text += f"‚Ä¢ ID: <code>{user_id}</code>\n"
            
            bot.edit_message_text(text, call.message.chat.id, call.message.message_id, 
                                 reply_markup=create_admin_keyboard(), parse_mode="HTML")
        
        elif call.data == "list_refuses":
            scammers = get_all_scammers()
            refuse_list = [user for user in scammers if user[2] == "–æ—Ç–∫–∞–∑ –æ—Ç –≥–∞—Ä–∞–Ω—Ç–∞"]
            
            if not refuse_list:
                text = "üö´ <b>–°–ø–∏—Å–æ–∫ –æ—Ç–∫–∞–∑–æ–≤ –æ—Ç –≥–∞—Ä–∞–Ω—Ç–∞:</b>\n\n‚ùå –û—Ç–∫–∞–∑–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            else:
                text = f"üö´ <b>–°–ø–∏—Å–æ–∫ –æ—Ç–∫–∞–∑–æ–≤ –æ—Ç –≥–∞—Ä–∞–Ω—Ç–∞ ({len(refuse_list)}):</b>\n\n"
                for user_id, username, role in refuse_list:
                    if user_id.startswith("@"):
                        text += f"‚Ä¢ <a href='https://t.me/{user_id[1:]}'>{user_id}</a>\n"
                    else:
                        text += f"‚Ä¢ ID: <code>{user_id}</code>\n"
            
            bot.edit_message_text(text, call.message.chat.id, call.message.message_id, 
                                 reply_markup=create_admin_keyboard(), parse_mode="HTML")
        
        elif call.data == "list_all":
            scammers = get_all_scammers()
            
            if not scammers:
                text = "üìä <b>–í—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n‚ùå –ü—Ä–æ–±–ª–µ–º–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            else:
                text = f"üìä <b>–í—Å–µ –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(scammers)}):</b>\n\n"
                for user_id, username, role in scammers:
                    role_emoji = "üî¥" if role == "—Å–∫–∞–º–µ—Ä" else "üü°"
                    if user_id.startswith("@"):
                        text += f"{role_emoji} <a href='https://t.me/{user_id[1:]}'>{user_id}</a> - <code>{role}</code>\n"
                    else:
                        text += f"{role_emoji} ID: <code>{user_id}</code> - <code>{role}</code>\n"
            
            bot.edit_message_text(text, call.message.chat.id, call.message.message_id, 
                                 reply_markup=create_admin_keyboard(), parse_mode="HTML")
        
        elif call.data == "list_users":
            users = get_all_users()
            
            if not users:
                text = "üë• <b>–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n\n‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
            else:
                text = f"üë• <b>–í—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ ({len(users)}):</b>\n\n"
                for user_id, username, role, percent in users:
                    role_emoji = {"—Å–∫–∞–º–µ—Ä": "üî¥", "–æ—Ç–∫–∞–∑ –æ—Ç –≥–∞—Ä–∞–Ω—Ç–∞": "üü°", "–≥–∞—Ä–∞–Ω—Ç": "üü¢", "–≤–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞": "üîµ"}.get(role, "‚ö™")
                    if user_id.startswith("@"):
                        text += f"{role_emoji} <a href='https://t.me/{user_id[1:]}'>{user_id}</a> - <code>{role}</code> ({percent})\n"
                    else:
                        text += f"{role_emoji} ID: <code>{user_id}</code> - <code>{role}</code> ({percent})\n"
            
            bot.edit_message_text(text, call.message.chat.id, call.message.message_id, 
                                 reply_markup=create_admin_keyboard(), parse_mode="HTML")
        
        elif call.data == "edit_user":
            text = "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ @username –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:"
            bot.edit_message_text(text, call.message.chat.id, call.message.message_id, 
                                 reply_markup=create_admin_keyboard(), parse_mode="HTML")
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∂–∏–º –æ–∂–∏–¥–∞–Ω–∏—è ID
            edit_sessions[call.from_user.id] = {"waiting_for_id": True, "message_id": call.message.message_id}
        
        elif call.data == "refresh_admin":
            markup = create_admin_keyboard()
            bot.edit_message_text("üîß <b>–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
                                 call.message.chat.id, call.message.message_id, 
                                 reply_markup=markup, parse_mode="HTML")
        
        elif call.data.startswith("edit_role_"):
            role_map = {
                "edit_role_scammer": ("—Å–∫–∞–º–µ—Ä", "100%"),
                "edit_role_refuse": ("–æ—Ç–∫–∞–∑ –æ—Ç –≥–∞—Ä–∞–Ω—Ç–∞", "80%"),
                "edit_role_garant": ("–≥–∞—Ä–∞–Ω—Ç", "0%"),
                "edit_role_owner": ("–≤–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞", "10%"),
                "edit_role_unverified": ("–Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π", "50%")
            }
            
            if call.from_user.id in edit_sessions and "target_id" in edit_sessions[call.from_user.id]:
                target_id = edit_sessions[call.from_user.id]["target_id"]
                new_role, new_percent = role_map[call.data]
                
                if update_user_role_by_id(target_id, new_role, new_percent):
                    text = f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω</b>\n\nID: <code>{target_id}</code>\n–†–æ–ª—å: <code>{new_role}</code>\n–ü—Ä–æ—Ü–µ–Ω—Ç: <code>{new_percent}</code>"
                    del edit_sessions[call.from_user.id]
                else:
                    text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
                
                bot.edit_message_text(text, call.message.chat.id, call.message.message_id, 
                                     reply_markup=create_admin_keyboard(), parse_mode="HTML")
        
        elif call.data == "edit_delete":
            if call.from_user.id in edit_sessions and "target_id" in edit_sessions[call.from_user.id]:
                target_id = edit_sessions[call.from_user.id]["target_id"]
                
                try:
                    conn = get_connection()
                    cursor = conn.cursor()
                    cursor.execute("DELETE FROM users WHERE user_id = %s", (target_id,))
                    success = cursor.rowcount > 0
                    conn.commit()
                    cursor.close()
                    conn.close()
                    
                    if success:
                        text = f"‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–¥–∞–ª–µ–Ω</b>\n\nID: <code>{target_id}</code>"
                    else:
                        text = "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î"
                    
                    del edit_sessions[call.from_user.id]
                except Exception as e:
                    text = f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {e}"
                
                bot.edit_message_text(text, call.message.chat.id, call.message.message_id, 
                                     reply_markup=create_admin_keyboard(), parse_mode="HTML")
        
        elif call.data == "edit_percent":
            if call.from_user.id in edit_sessions and "target_id" in edit_sessions[call.from_user.id]:
                text = "üî¢ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–Ω—Ç–∞</b>\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: 25%):"
                edit_sessions[call.from_user.id]["waiting_for_percent"] = True
                bot.edit_message_text(text, call.message.chat.id, call.message.message_id, 
                                     reply_markup=create_admin_keyboard(), parse_mode="HTML")
    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ callback handler: {e}")
        bot.answer_callback_query(call.id, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
    
    bot.answer_callback_query(call.id)

@bot.message_handler(func=lambda msg: msg.text and msg.text.lower().startswith("—á–µ–∫"))
def handle_check(msg):
    chats.add(msg.chat.id)
    
    # –ï—Å–ª–∏ –∫–æ–º–∞–Ω–¥–∞ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ - –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–µ–±—è
    if not msg.reply_to_message:
        user = msg.from_user
        role = get_user_role(user.id, user.username)
        risk = get_risk(role)
        profile_link = format_user_profile(user.id, user.username, user.first_name)
        
        text = (
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å: {profile_link}\n"
            f"üîπ –†–æ–ª—å: <code>{role}</code>\n"
            f"üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∫–∞–º–∞: <code>{risk}</code>"
        )
        bot.reply_to(msg, text)
        return
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ –æ—Ç–≤–µ—Ç—É –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if msg.reply_to_message:
        user = msg.reply_to_message.from_user
        role = get_user_role(user.id, user.username)
        risk = get_risk(role)
        profile_link = format_user_profile(user.id, user.username, user.first_name)
            
        text = (
            f"üë§ –ü—Ä–æ—Ñ–∏–ª—å: {profile_link}\n"
            f"üîπ –†–æ–ª—å: <code>{role}</code>\n"
            f"üìä –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å —Å–∫–∞–º–∞: <code>{risk}</code>"
        )
        bot.reply_to(msg, text)
        return

@bot.message_handler(func=lambda msg: msg.text and msg.text.lower().startswith("–∑–∞–Ω–µ—Å—Ç–∏"))
def handle_add_role(msg):
    chats.add(msg.chat.id)
    caller_role = get_user_role(msg.from_user.id, msg.from_user.username)

    if msg.chat.type != "private":
        if msg.from_user.id not in OWNER_IDS and caller_role not in ["–≥–∞—Ä–∞–Ω—Ç", "–≤–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞"]:
            return

    parts = msg.text.strip().split()
    if len(parts) < 2:
        bot.reply_to(msg, "–ü—Ä–∏–º–µ—Ä: –∑–∞–Ω–µ—Å—Ç–∏ —Å–∫–∞–º–µ—Ä (–æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ)")
        return

    if not msg.reply_to_message:
        bot.reply_to(msg, "‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    role = parts[1].lower()
    target = msg.reply_to_message.from_user
    target_id = target.id
    target_username = target.username
    profile_link = format_user_profile(target.id, target.username, target.first_name)

    allowed_roles = ["—Å–∫–∞–º–µ—Ä", "–≥–∞—Ä–∞–Ω—Ç", "–≤–ª–∞–¥–µ–ª–µ—Ü_—á–∞—Ç–∞", "–æ—Ç–∫–∞–∑", "–æ—Ç–∫–∞–∑_–æ—Ç_–≥–∞—Ä–∞–Ω—Ç–∞"]
    if role not in allowed_roles:
        bot.reply_to(msg, "–†–æ–ª–∏: —Å–∫–∞–º–µ—Ä, –≥–∞—Ä–∞–Ω—Ç, –≤–ª–∞–¥–µ–ª–µ—Ü_—á–∞—Ç–∞, –æ—Ç–∫–∞–∑, –æ—Ç–∫–∞–∑_–æ—Ç_–≥–∞—Ä–∞–Ω—Ç–∞")
        return

    if caller_role in ["–≥–∞—Ä–∞–Ω—Ç", "–≤–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞"] and role == "–≥–∞—Ä–∞–Ω—Ç":
        bot.reply_to(msg, "‚ùå –ù–µ–ª—å–∑—è –∑–∞–Ω–æ—Å–∏—Ç—å –≥–∞—Ä–∞–Ω—Ç–æ–≤.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if target_username and target_username.lower() in [k.lower() for k in OWNER_USERNAMES.keys()]:
        bot.reply_to(msg, "‚ùå –ù–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å —Ä–æ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü—É.")
        return
    
    if target_id and target_id in OWNER_IDS:
        bot.reply_to(msg, "‚ùå –ù–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å —Ä–æ–ª—å –≤–ª–∞–¥–µ–ª—å—Ü—É.")
        return

    if role.startswith("–æ—Ç–∫–∞–∑"):
        role_text = "–æ—Ç–∫–∞–∑ –æ—Ç –≥–∞—Ä–∞–Ω—Ç–∞"
        scam_percent = "80%"
    elif role == "–≤–ª–∞–¥–µ–ª–µ—Ü_—á–∞—Ç–∞":
        role_text = "–≤–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞"
        scam_percent = "10%"
    elif role == "—Å–∫–∞–º–µ—Ä":
        role_text = "—Å–∫–∞–º–µ—Ä"
        scam_percent = "100%"
    elif role == "–≥–∞—Ä–∞–Ω—Ç":
        role_text = "–≥–∞—Ä–∞–Ω—Ç"
        scam_percent = "0%"
    else:
        role_text = role
        scam_percent = "50%"

    if not save_user_role(target_id, target_username, role_text, scam_percent):
        bot.reply_to(msg, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≤ –ë–î")
        return

    if role_text == "—Å–∫–∞–º–µ—Ä":
        alert = f"‚ö†Ô∏è {profile_link} –∑–∞–Ω–µ—Å—ë–Ω –∫–∞–∫ <b>–°–ö–ê–ú–ï–†</b>!"
        for chat_id in chats:
            try:
                bot.send_message(chat_id, alert)
            except Exception as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ —á–∞—Ç {chat_id}: {e}")

    bot.reply_to(msg, f"{profile_link} ‚úÖ –∑–∞–Ω–µ—Å—ë–Ω –∫–∞–∫ {role_text.upper()}")

@bot.message_handler(func=lambda msg: msg.text and msg.text.lower().startswith("–≤—ã–Ω–µ—Å—Ç–∏"))
def handle_remove_user(msg):
    chats.add(msg.chat.id)
    caller_role = get_user_role(msg.from_user.id, msg.from_user.username)

    if msg.chat.type != "private":
        if msg.from_user.id not in OWNER_IDS and caller_role not in ["–≥–∞—Ä–∞–Ω—Ç", "–≤–ª–∞–¥–µ–ª–µ—Ü —á–∞—Ç–∞"]:
            return

    if not msg.reply_to_message:
        bot.reply_to(msg, "‚ùå –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    
    target = msg.reply_to_message.from_user
    target_id = target.id
    target_username = target.username
    profile_link = format_user_profile(target.id, target.username, target.first_name)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤–ª–∞–¥–µ–ª—å—Ü–∞
    if target_username and target_username.lower() in [k.lower() for k in OWNER_USERNAMES.keys()]:
        bot.reply_to(msg, "‚ùå –ù–µ–ª—å–∑—è –≤—ã–Ω–æ—Å–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
        return
    
    if target_id and target_id in OWNER_IDS:
        bot.reply_to(msg, "‚ùå –ù–µ–ª—å–∑—è –≤—ã–Ω–æ—Å–∏—Ç—å –≤–ª–∞–¥–µ–ª—å—Ü–∞.")
        return

    if delete_user(target_id, target_username):
        bot.reply_to(msg, f"‚úÖ {profile_link} —É–¥–∞–ª–µ–Ω –∏–∑ –±–∞–∑—ã")
    else:
        bot.reply_to(msg, f"‚ùå {profile_link} –Ω–µ –Ω–∞–π–¥–µ–Ω")

@bot.message_handler(content_types=['new_chat_members'])
def on_new_members(message):
    chats.add(message.chat.id)
    for user in message.new_chat_members:
        role = get_user_role(user.id, user.username)
        risk = get_risk(role)
        if role == "–Ω–µ–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–π":
            bot.send_message(
                message.chat.id,
                f"üö® –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <a href='tg://user?id={user.id}'>{user.first_name}</a>\n"
                f"–†–æ–ª—å: <code>{role}</code>\nüìä –†–∏—Å–∫: <code>{risk}</code>"
            )

@bot.message_handler(func=lambda msg: msg.chat.type in ["group", "supergroup"])
def auto_check_group(msg):
    chats.add(msg.chat.id)
    user = msg.from_user
    role = get_user_role(user.id, user.username)
    if role == "—Å–∫–∞–º–µ—Ä":
        bot.reply_to(msg, f"‚ö†Ô∏è –û—Å—Ç–æ—Ä–æ–∂–Ω–æ! <a href='tg://user?id={user.id}'>{user.first_name}</a> ‚Äî <b>–°–ö–ê–ú–ï–†</b>.")

@bot.message_handler(func=lambda msg: msg.chat.type == "private" and msg.from_user.id in edit_sessions)
def handle_edit_input(msg):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏"""
    user_id = msg.from_user.id
    session = edit_sessions.get(user_id, {})
    
    if session.get("waiting_for_id"):
        # –ü–æ–ª—É—á–∏–ª–∏ ID –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        target_input = msg.text.strip()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
        try:
            conn = get_connection()
            cursor = conn.cursor()
            
            if target_input.startswith("@"):
                cursor.execute("SELECT user_id, role, scam_percent FROM users WHERE LOWER(user_id) = LOWER(%s)", (target_input,))
            else:
                cursor.execute("SELECT user_id, role, scam_percent FROM users WHERE user_id = %s", (target_input,))
            
            result = cursor.fetchone()
            cursor.close()
            conn.close()
            
            if result:
                user_db_id, current_role, current_percent = result
                session["target_id"] = user_db_id
                session["waiting_for_id"] = False
                edit_sessions[user_id] = session
                
                text = f"üë§ <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\nID: <code>{user_db_id}</code>\n–¢–µ–∫—É—â–∞—è —Ä–æ–ª—å: <code>{current_role}</code>\n–¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ–Ω—Ç: <code>{current_percent}</code>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
                
                try:
                    bot.edit_message_text(text, msg.chat.id, session["message_id"], 
                                         reply_markup=create_edit_keyboard(), parse_mode="HTML")
                except:
                    bot.send_message(msg.chat.id, text, reply_markup=create_edit_keyboard(), parse_mode="HTML")
            else:
                text = f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å <code>{target_input}</code> –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"
                try:
                    bot.edit_message_text(text, msg.chat.id, session["message_id"], 
                                         reply_markup=create_admin_keyboard(), parse_mode="HTML")
                except:
                    bot.send_message(msg.chat.id, text, reply_markup=create_admin_keyboard(), parse_mode="HTML")
                del edit_sessions[user_id]
        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            try:
                bot.edit_message_text(text, msg.chat.id, session["message_id"], 
                                     reply_markup=create_admin_keyboard(), parse_mode="HTML")
            except:
                bot.send_message(msg.chat.id, text, reply_markup=create_admin_keyboard(), parse_mode="HTML")
            del edit_sessions[user_id]
    
    elif session.get("waiting_for_percent"):
        # –ü–æ–ª—É—á–∏–ª–∏ –Ω–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç
        new_percent = msg.text.strip()
        
        if not new_percent.endswith("%"):
            new_percent += "%"
        
        target_id = session["target_id"]
        
        try:
            conn = get_connection()
            cursor = conn.cursor()
            cursor.execute("UPDATE users SET scam_percent = %s WHERE user_id = %s", (new_percent, target_id))
            success = cursor.rowcount > 0
            conn.commit()
            cursor.close()
            conn.close()
            
            if success:
                text = f"‚úÖ <b>–ü—Ä–æ—Ü–µ–Ω—Ç –æ–±–Ω–æ–≤–ª–µ–Ω</b>\n\nID: <code>{target_id}</code>\n–ù–æ–≤—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç: <code>{new_percent}</code>"
            else:
                text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞"
            
            del edit_sessions[user_id]
            
            try:
                bot.edit_message_text(text, msg.chat.id, session["message_id"], 
                                     reply_markup=create_admin_keyboard(), parse_mode="HTML")
            except:
                bot.send_message(msg.chat.id, text, reply_markup=create_admin_keyboard(), parse_mode="HTML")
        
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞: {e}")
            text = "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ–Ω—Ç–∞"
            try:
                bot.edit_message_text(text, msg.chat.id, session["message_id"], 
                                     reply_markup=create_admin_keyboard(), parse_mode="HTML")
            except:
                bot.send_message(msg.chat.id, text, reply_markup=create_admin_keyboard(), parse_mode="HTML")
            del edit_sessions[user_id]

@bot.message_handler(func=lambda msg: True)
def register_chat(msg):
    chats.add(msg.chat.id)

print("–ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
try:
    bot.infinity_polling()
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
